generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
  schemas   = ["app", "auth", "public"]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model actuals {
  id                              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  org_id                          String        @db.Uuid
  plan_id                         String        @unique @db.Uuid
  actual_qty                      Decimal       @db.Decimal
  unit                            unit          @default(T)
  vehicle_no                      String?
  driver_name                     String?
  weighing_ticket_no              String?
  photo_urls                      String[]
  confirmed_at                    DateTime      @default(now()) @db.Timestamptz(6)
  created_at                      DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime?     @db.Timestamptz(6)
  created_by                      String?       @db.Uuid
  updated_by                      String?       @db.Uuid
  deleted_at                      DateTime?     @db.Timestamptz(6)
  users_actuals_created_byTousers auth_users?   @relation("actuals_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations                   organizations @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  plans                           plans         @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_actuals_updated_byTousers auth_users?   @relation("actuals_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([org_id], map: "idx_actuals_org_id")
  @@index([plan_id], map: "idx_actuals_plan_id")
  @@index([plan_id, created_at], map: "idx_actuals_plan_id_created")
  @@schema("app")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model approvals {
  id                                 String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  org_id                             String        @db.Uuid
  plan_id                            String        @unique @db.Uuid
  approved_by                        String        @db.Uuid
  approved_at                        DateTime      @default(now()) @db.Timestamptz(6)
  created_at                         DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at                         DateTime?     @db.Timestamptz(6)
  created_by                         String?       @db.Uuid
  updated_by                         String?       @db.Uuid
  deleted_at                         DateTime?     @db.Timestamptz(6)
  users_approvals_approved_byTousers auth_users    @relation("approvals_approved_byTousers", fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_approvals_created_byTousers  auth_users?   @relation("approvals_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations                      organizations @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  plans                              plans         @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_approvals_updated_byTousers  auth_users?   @relation("approvals_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([org_id], map: "idx_approvals_org_id")
  @@index([plan_id], map: "idx_approvals_plan_id")
  @@schema("app")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model audit_logs {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  org_id        String        @db.Uuid
  actor_id      String?       @db.Uuid
  actor_role    app_role?
  action        String
  entity        String
  entity_id     String        @db.Uuid
  from_json     Json?
  to_json       Json?
  ip            String?
  ua            String?
  created_at    DateTime?     @default(now()) @db.Timestamptz(6)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at], map: "idx_audit_logs_created_at")
  @@index([created_at(sort: Desc), org_id], map: "idx_audit_logs_created_org")
  @@index([org_id], map: "idx_audit_logs_org_id")
  @@index([created_at(sort: Desc)], map: "idx_audit_logs_recent")
  @@schema("app")
}

model app_billing_items {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id                String    @db.Uuid
  collector_id          String    @db.Uuid
  store_id              String?   @db.Uuid
  collection_id         String?   @db.Uuid
  billing_month         DateTime  @db.Date
  billing_period_from   DateTime  @db.Date
  billing_period_to     DateTime  @db.Date
  billing_type          String    @db.VarChar(50)
  item_name             String    @db.VarChar(255)
  item_code             String?   @db.VarChar(50)
  waste_type_id         String?   @db.Uuid
  unit_price            Float?    @db.Real
  quantity              Float?    @db.Real
  unit                  String?   @db.VarChar(10)
  amount                Float     @db.Real
  tax_rate              Float     @default(0.10) @db.Real
  tax_amount            Float     @db.Real
  total_amount          Float     @db.Real
  jwnet_registration_id String?   @db.VarChar(255)
  jwnet_manifest_no     String?   @db.VarChar(50)
  status                String    @default("DRAFT") @db.VarChar(50)
  submitted_at          DateTime? @db.Timestamptz(6)
  approved_at           DateTime? @db.Timestamptz(6)
  approved_by           String?   @db.Uuid
  paid_at               DateTime? @db.Timestamptz(6)
  notes                 String?
  created_at            DateTime  @default(now()) @db.Timestamptz(6)
  updated_at            DateTime  @default(now()) @db.Timestamptz(6)
  created_by            String?   @db.Uuid
  updated_by            String?   @db.Uuid
  deleted_at            DateTime? @db.Timestamptz(6)

  @@index([collection_id], map: "idx_billing_collection")
  @@index([collector_id], map: "idx_billing_collector")
  @@index([billing_month], map: "idx_billing_month")
  @@index([org_id], map: "idx_billing_org")
  @@index([status], map: "idx_billing_status")
  @@index([store_id], map: "idx_billing_store")
  @@index([submitted_at], map: "idx_billing_submitted")
  @@index([billing_type], map: "idx_billing_type")
  @@map("billing_items")
  @@schema("app")
}

model billing_summaries {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id               String    @db.Uuid
  collector_id         String    @db.Uuid
  billing_month        DateTime  @db.Date
  total_fixed_amount   Float     @default(0) @db.Real
  total_metered_amount Float     @default(0) @db.Real
  total_other_amount   Float     @default(0) @db.Real
  subtotal_amount      Float     @default(0) @db.Real
  tax_amount           Float     @default(0) @db.Real
  total_amount         Float     @default(0) @db.Real
  total_items_count    Int       @default(0)
  fixed_items_count    Int       @default(0)
  metered_items_count  Int       @default(0)
  other_items_count    Int       @default(0)
  status               String    @default("DRAFT") @db.VarChar(50)
  submitted_at         DateTime? @db.Timestamptz(6)
  approved_at          DateTime? @db.Timestamptz(6)
  approved_by          String?   @db.Uuid
  paid_at              DateTime? @db.Timestamptz(6)
  notes                String?
  created_at           DateTime  @default(now()) @db.Timestamptz(6)
  updated_at           DateTime  @default(now()) @db.Timestamptz(6)
  created_by           String?   @db.Uuid
  updated_by           String?   @db.Uuid

  @@unique([org_id, collector_id, billing_month], map: "unique_billing_summary")
  @@index([collector_id], map: "idx_billing_summary_collector")
  @@index([billing_month], map: "idx_billing_summary_month")
  @@index([org_id], map: "idx_billing_summary_org")
  @@index([status], map: "idx_billing_summary_status")
  @@schema("app")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model collection_requests {
  id                        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id                    String        @db.Uuid
  store_id                  String        @db.Uuid
  collector_id              String?       @db.Uuid
  waste_type_id             String?       @db.Uuid
  main_items                Json          @default("[]")
  other_items               Json?         @default("[]")
  status                    String        @default("PENDING")
  priority                  String?       @default("NORMAL")
  requested_at              DateTime      @default(now()) @db.Timestamptz(6)
  scheduled_collection_date DateTime?     @db.Date
  actual_collection_date    DateTime?     @db.Date
  notes                     String?
  created_by                String        @default("system")
  updated_by                String        @default("system")
  created_at                DateTime      @default(now()) @db.Timestamptz(6)
  updated_at                DateTime      @default(now()) @db.Timestamptz(6)
  users                     public_users? @relation(fields: [collector_id], references: [id], onUpdate: NoAction)
  organizations             organizations @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  stores                    stores        @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  waste_types               waste_types?  @relation(fields: [waste_type_id], references: [id], onUpdate: NoAction)
  collections               collections[]

  @@index([collector_id], map: "idx_collection_requests_collector_id")
  @@index([org_id], map: "idx_collection_requests_org_id")
  @@index([scheduled_collection_date], map: "idx_collection_requests_scheduled_date")
  @@index([status], map: "idx_collection_requests_status")
  @@index([store_id], map: "idx_collection_requests_store_id")
  @@schema("app")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model collections {
  id                    String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id                String              @db.Uuid
  request_id            String              @db.Uuid
  actual_qty            Decimal             @db.Decimal(10, 2)
  actual_unit           String
  collected_at          DateTime            @default(now()) @db.Timestamptz(6)
  jwnet_reservation_id  String?
  jwnet_registration_id String?
  jwnet_status          String?
  photo_urls            Json?               @default("[]")
  notes                 String?
  created_by            String              @default("system")
  updated_by            String              @default("system")
  created_at            DateTime            @default(now()) @db.Timestamptz(6)
  updated_at            DateTime            @default(now()) @db.Timestamptz(6)
  organizations         organizations       @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  collection_requests   collection_requests @relation(fields: [request_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([collected_at], map: "idx_collections_collected_at")
  @@index([org_id], map: "idx_collections_org_id")
  @@index([request_id], map: "idx_collections_request_id")
  @@schema("app")
}

model contracts {
  id                                                String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  org_id                                            String        @db.Uuid
  emitter_id                                        String        @db.Uuid
  transporter_id                                    String?       @db.Uuid
  disposer_id                                       String?       @db.Uuid
  scope                                             Json?
  valid_from                                        DateTime      @db.Date
  valid_to                                          DateTime?     @db.Date
  created_at                                        DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at                                        DateTime?     @db.Timestamptz(6)
  created_by                                        String?       @db.Uuid
  updated_by                                        String?       @db.Uuid
  deleted_at                                        DateTime?     @db.Timestamptz(6)
  users_contracts_created_byTousers                 auth_users?   @relation("contracts_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations_contracts_emitter_idToorganizations organizations @relation("contracts_emitter_idToorganizations", fields: [emitter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organizations_contracts_org_idToorganizations     organizations @relation("contracts_org_idToorganizations", fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_contracts_updated_byTousers                 auth_users?   @relation("contracts_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("app")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model item_maps {
  id                                String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  org_id                            String        @db.Uuid
  item_label                        String
  jwnet_code                        String
  hazard                            Boolean       @default(false)
  default_unit                      unit          @default(T)
  density_t_per_m3                  Decimal?      @db.Decimal
  disposal_method_code              String?
  notes                             String?
  created_at                        DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at                        DateTime?     @db.Timestamptz(6)
  created_by                        String?       @db.Uuid
  updated_by                        String?       @db.Uuid
  deleted_at                        DateTime?     @db.Timestamptz(6)
  users_item_maps_created_byTousers auth_users?   @relation("item_maps_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations                     organizations @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_item_maps_updated_byTousers auth_users?   @relation("item_maps_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  plans                             plans[]

  @@unique([org_id, item_label])
  @@index([org_id], map: "idx_item_maps_org_id")
  @@index([org_id, item_label], map: "idx_item_maps_org_label")
  @@schema("app")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model jwnet_party_combinations {
  id                                                                       String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id                                                                   String        @db.Uuid
  emitter_org_id                                                           String        @db.Uuid
  emitter_subscriber_no                                                    String        @db.VarChar(10)
  emitter_public_confirm_no                                                String        @db.VarChar(10)
  emitter_name                                                             String        @db.VarChar(255)
  emitter_address                                                          String        @db.VarChar(500)
  emitter_postal_code                                                      String        @db.VarChar(20)
  transporter_org_id                                                       String        @db.Uuid
  transporter_subscriber_no                                                String        @db.VarChar(10)
  transporter_public_confirm_no                                            String        @db.VarChar(10)
  transporter_name                                                         String        @db.VarChar(255)
  transporter_address                                                      String        @db.VarChar(500)
  transporter_postal_code                                                  String        @db.VarChar(20)
  transporter_phone                                                        String?       @db.VarChar(50)
  disposer_org_id                                                          String        @db.Uuid
  disposer_subscriber_no                                                   String        @db.VarChar(10)
  disposer_public_confirm_no                                               String        @db.VarChar(10)
  disposer_name                                                            String        @db.VarChar(255)
  disposer_address                                                         String        @db.VarChar(500)
  disposer_postal_code                                                     String        @db.VarChar(20)
  disposer_phone                                                           String?       @db.VarChar(50)
  is_active                                                                Boolean       @default(true)
  valid_from                                                               DateTime      @db.Date
  valid_to                                                                 DateTime?     @db.Date
  notes                                                                    String?
  created_at                                                               DateTime      @default(now()) @db.Timestamptz(6)
  updated_at                                                               DateTime      @default(now()) @db.Timestamptz(6)
  created_by                                                               String?       @db.Uuid
  updated_by                                                               String?       @db.Uuid
  deleted_at                                                               DateTime?     @db.Timestamptz(6)
  organizations_jwnet_party_combinations_disposer_org_idToorganizations    organizations @relation("jwnet_party_combinations_disposer_org_idToorganizations", fields: [disposer_org_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_jwnet_party_combo_disposer")
  organizations_jwnet_party_combinations_emitter_org_idToorganizations     organizations @relation("jwnet_party_combinations_emitter_org_idToorganizations", fields: [emitter_org_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_jwnet_party_combo_emitter")
  organizations_jwnet_party_combinations_transporter_org_idToorganizations organizations @relation("jwnet_party_combinations_transporter_org_idToorganizations", fields: [transporter_org_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_jwnet_party_combo_transporter")

  @@unique([emitter_subscriber_no, emitter_public_confirm_no, transporter_subscriber_no, transporter_public_confirm_no, disposer_subscriber_no, disposer_public_confirm_no], map: "unique_party_combination")
  @@index([is_active], map: "idx_jwnet_party_combo_active")
  @@index([disposer_org_id], map: "idx_jwnet_party_combo_disposer")
  @@index([emitter_org_id], map: "idx_jwnet_party_combo_emitter")
  @@index([org_id], map: "idx_jwnet_party_combo_org_id")
  @@index([transporter_org_id], map: "idx_jwnet_party_combo_transporter")
  @@schema("app")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model jwnet_waste_codes {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  waste_code         String               @unique @db.VarChar(10)
  waste_name         String               @db.VarChar(255)
  waste_category     String               @db.VarChar(100)
  waste_type         String               @db.VarChar(100)
  unit_code          String               @db.VarChar(10)
  unit_name          String               @db.VarChar(50)
  is_active          Boolean              @default(true)
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  updated_at         DateTime             @default(now()) @db.Timestamptz(6)
  waste_type_masters waste_type_masters[]

  @@index([is_active], map: "idx_jwnet_waste_active")
  @@index([waste_category], map: "idx_jwnet_waste_category")
  @@index([waste_code], map: "idx_jwnet_waste_code")
  @@schema("app")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model organizations {
  id                                                                                  String                        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                                                                                String
  created_at                                                                          DateTime                      @default(now()) @db.Timestamptz(6)
  jwnet_subscriber_id                                                                 String?                       @db.VarChar(10)
  jwnet_public_confirmation_id                                                        String?                       @db.VarChar(10)
  code                                                                                String?                       @db.VarChar(50)
  updated_at                                                                          DateTime?                     @default(now()) @db.Timestamptz(6)
  created_by                                                                          String?                       @db.Uuid
  updated_by                                                                          String?                       @db.Uuid
  deleted_at                                                                          DateTime?                     @db.Timestamptz(6)
  org_type                                                                            String?                       @db.VarChar(50)
  is_active                                                                           Boolean                       @default(true)
  actuals                                                                             actuals[]
  approvals                                                                           approvals[]
  audit_logs                                                                          audit_logs[]
  collection_requests                                                                 collection_requests[]
  collections                                                                         collections[]
  contracts_contracts_emitter_idToorganizations                                       contracts[]                   @relation("contracts_emitter_idToorganizations")
  contracts_contracts_org_idToorganizations                                           contracts[]                   @relation("contracts_org_idToorganizations")
  item_maps                                                                           item_maps[]
  jwnet_party_combinations_jwnet_party_combinations_disposer_org_idToorganizations    jwnet_party_combinations[]    @relation("jwnet_party_combinations_disposer_org_idToorganizations")
  jwnet_party_combinations_jwnet_party_combinations_emitter_org_idToorganizations     jwnet_party_combinations[]    @relation("jwnet_party_combinations_emitter_org_idToorganizations")
  jwnet_party_combinations_jwnet_party_combinations_transporter_org_idToorganizations jwnet_party_combinations[]    @relation("jwnet_party_combinations_transporter_org_idToorganizations")
  plans                                                                               plans[]
  registrations                                                                       registrations[]
  reservations                                                                        reservations[]
  stage_plans                                                                         stage_plans[]
  store_collector_assignments                                                         store_collector_assignments[]
  stores                                                                              stores[]
  user_org_roles                                                                      user_org_roles[]
  billing_change_logs                                                                 billing_change_logs[]
  billing_items                                                                       public_billing_items[]
  billing_records                                                                     billing_records[]
  closing_date_settings                                                               closing_date_settings[]
  commission_masters                                                                  commission_masters[]
  end_user_billing_items                                                              end_user_billing_items[]
  end_user_billing_records                                                            end_user_billing_records[]
  price_masters                                                                       price_masters[]

  @@schema("app")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model plans {
  id                            String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  org_id                        String         @db.Uuid
  store_id                      String         @db.Uuid
  planned_date                  DateTime       @db.Date
  item_map_id                   String         @db.Uuid
  planned_qty                   Decimal        @db.Decimal
  unit                          unit           @default(T)
  earliest_pickup_date          DateTime?      @db.Date
  route_id                      String?
  split_group                   String?
  created_at                    DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime?      @db.Timestamptz(6)
  created_by                    String?        @db.Uuid
  updated_by                    String?        @db.Uuid
  deleted_at                    DateTime?      @db.Timestamptz(6)
  actuals                       actuals?
  approvals                     approvals?
  users_plans_created_byTousers auth_users?    @relation("plans_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  item_maps                     item_maps      @relation(fields: [item_map_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations                 organizations  @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  stores                        stores         @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_plans_updated_byTousers auth_users?    @relation("plans_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  registrations                 registrations?
  reservations                  reservations[]

  @@unique([org_id, store_id, planned_date, item_map_id])
  @@index([org_id, planned_date], map: "idx_plans_org_date")
  @@index([org_id], map: "idx_plans_org_id")
  @@index([org_id, store_id, planned_date], map: "idx_plans_org_store_date")
  @@schema("app")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model registrations {
  id                                    String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  org_id                                String        @db.Uuid
  plan_id                               String        @unique @db.Uuid
  manifest_no                           String?
  status                                reg_status    @default(PENDING)
  error_code                            String?
  last_sent_at                          DateTime?     @db.Timestamptz(6)
  created_at                            DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at                            DateTime?     @db.Timestamptz(6)
  created_by                            String?       @db.Uuid
  updated_by                            String?       @db.Uuid
  deleted_at                            DateTime?     @db.Timestamptz(6)
  users_registrations_created_byTousers auth_users?   @relation("registrations_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations                         organizations @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  plans                                 plans         @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_registrations_updated_byTousers auth_users?   @relation("registrations_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([org_id], map: "idx_registrations_org_id")
  @@index([org_id, status], map: "idx_registrations_org_status")
  @@index([status], map: "idx_registrations_status")
  @@schema("app")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reservations {
  id                                   String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  org_id                               String        @db.Uuid
  plan_id                              String        @db.Uuid
  jwnet_temp_id                        String?
  payload_hash                         String        @unique
  status                               reg_status    @default(PENDING)
  last_sent_at                         DateTime?     @db.Timestamptz(6)
  error_code                           String?
  created_at                           DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at                           DateTime?     @db.Timestamptz(6)
  created_by                           String?       @db.Uuid
  updated_by                           String?       @db.Uuid
  deleted_at                           DateTime?     @db.Timestamptz(6)
  users_reservations_created_byTousers auth_users?   @relation("reservations_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations                        organizations @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  plans                                plans         @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_reservations_updated_byTousers auth_users?   @relation("reservations_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([org_id, plan_id])
  @@index([org_id], map: "idx_reservations_org_id")
  @@index([org_id, status], map: "idx_reservations_org_status")
  @@index([status], map: "idx_reservations_status")
  @@schema("app")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model stage_plans {
  id            BigInt        @id @default(autoincrement())
  org_id        String        @db.Uuid
  raw           Json
  received_at   DateTime?     @default(now()) @db.Timestamptz(6)
  processed     Boolean?      @default(false)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([org_id], map: "idx_stage_plans_org_id")
  @@index([processed], map: "idx_stage_plans_processed")
  @@schema("app")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model store_collector_assignments {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id         String        @db.Uuid
  store_id       String        @db.Uuid
  collector_id   String        @db.Uuid
  priority       Int           @default(1)
  is_active      Boolean       @default(true)
  effective_from DateTime?     @db.Date
  effective_to   DateTime?     @db.Date
  created_by     String        @default("system")
  updated_by     String        @default("system")
  created_at     DateTime      @default(now()) @db.Timestamptz(6)
  updated_at     DateTime      @default(now()) @db.Timestamptz(6)
  users          public_users  @relation(fields: [collector_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organizations  organizations @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  stores         stores        @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([store_id, collector_id], map: "store_collector_unique")
  @@index([collector_id], map: "idx_store_collector_assignments_collector_id")
  @@index([is_active], map: "idx_store_collector_assignments_is_active")
  @@index([org_id], map: "idx_store_collector_assignments_org_id")
  @@index([store_id], map: "idx_store_collector_assignments_store_id")
  @@schema("app")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model stores {
  id                             String                        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  org_id                         String                        @db.Uuid
  store_code                     String
  name                           String
  address                        String?
  area                           String?
  emitter_no                     String?
  created_at                     DateTime?                     @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime?                     @db.Timestamptz(6)
  created_by                     String?                       @db.Uuid
  updated_by                     String?                       @db.Uuid
  deleted_at                     DateTime?                     @db.Timestamptz(6)
  jwnet_subscriber_id            String?                       @db.VarChar(10)
  jwnet_public_confirmation_id   String?                       @db.VarChar(10)
  collection_requests            collection_requests[]
  plans                          plans[]
  store_collector_assignments    store_collector_assignments[]
  users_stores_created_byTousers auth_users?                   @relation("stores_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations                  organizations                 @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_stores_updated_byTousers auth_users?                   @relation("stores_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  billing_records                billing_records[]
  price_masters                  price_masters[]

  @@unique([org_id, store_code])
  @@index([org_id, store_code], map: "idx_stores_org_code")
  @@index([org_id], map: "idx_stores_org_id")
  @@schema("app")
}

model user_org_roles {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String        @db.Uuid
  org_id        String        @db.Uuid
  role          app_role
  is_active     Boolean       @default(true)
  created_at    DateTime      @default(now()) @db.Timestamptz(6)
  updated_at    DateTime      @default(now()) @db.Timestamptz(6)
  created_by    String?       @db.Uuid
  updated_by    String?       @db.Uuid
  deleted_at    DateTime?     @db.Timestamptz(6)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         app_users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, org_id, role])
  @@schema("app")
}

model app_users {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auth_user_id   String           @unique @db.Uuid
  name           String
  is_active      Boolean          @default(true)
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  deleted_at     DateTime?        @db.Timestamptz(6)
  email          String           @unique @default("") @db.VarChar(255)
  created_by     String?          @db.Uuid
  updated_by     String?          @db.Uuid
  user_org_roles user_org_roles[]
  users          auth_users       @relation(fields: [auth_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([auth_user_id], map: "idx_users_auth_user_id")
  @@index([email], map: "idx_users_email")
  @@map("users")
  @@schema("app")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model waste_type_masters {
  id                   String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id               String            @db.Uuid
  collector_id         String            @db.Uuid
  waste_type_code      String            @db.VarChar(50)
  waste_type_name      String            @db.VarChar(255)
  waste_category       String            @db.VarChar(100)
  waste_classification String            @db.VarChar(100)
  jwnet_waste_code_id  String            @db.Uuid
  jwnet_waste_code     String            @db.VarChar(10)
  unit_code            String            @db.VarChar(10)
  unit_price           Float?            @db.Real
  description          String?
  is_active            Boolean           @default(true)
  created_at           DateTime          @default(now()) @db.Timestamptz(6)
  updated_at           DateTime          @default(now()) @db.Timestamptz(6)
  created_by           String?           @db.Uuid
  updated_by           String?           @db.Uuid
  deleted_at           DateTime?         @db.Timestamptz(6)
  billing_category     String?           @db.VarChar(20)
  billing_type_default String?           @db.VarChar(20)
  jwnet_waste_codes    jwnet_waste_codes @relation(fields: [jwnet_waste_code_id], references: [id], onUpdate: NoAction, map: "fk_waste_type_jwnet_code")

  @@unique([org_id, collector_id, waste_type_code], map: "unique_waste_type_per_collector")
  @@index([is_active], map: "idx_waste_type_active")
  @@index([collector_id], map: "idx_waste_type_collector")
  @@index([jwnet_waste_code], map: "idx_waste_type_jwnet_code")
  @@index([billing_category], map: "idx_waste_type_masters_billing_category")
  @@index([org_id], map: "idx_waste_type_org")
  @@schema("app")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model identities {
  provider_id     String
  user_id         String     @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime?  @db.Timestamptz(6)
  created_at      DateTime?  @db.Timestamptz(6)
  updated_at      DateTime?  @db.Timestamptz(6)
  email           String?    @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           auth_users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_challenges {
  id                     String      @id @db.Uuid
  factor_id              String      @db.Uuid
  created_at             DateTime    @db.Timestamptz(6)
  verified_at            DateTime?   @db.Timestamptz(6)
  ip_address             String      @db.Inet
  otp_code               String?
  web_authn_session_data Json?
  mfa_factors            mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_factors {
  id                   String           @id @db.Uuid
  user_id              String           @db.Uuid
  friendly_name        String?
  factor_type          factor_type
  status               factor_status
  created_at           DateTime         @db.Timestamptz(6)
  updated_at           DateTime         @db.Timestamptz(6)
  secret               String?
  phone                String?
  last_challenged_at   DateTime?        @unique @db.Timestamptz(6)
  web_authn_credential Json?
  web_authn_aaguid     String?          @db.Uuid
  mfa_challenges       mfa_challenges[]
  users                auth_users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model oauth_clients {
  id                 String                  @id @db.Uuid
  client_id          String                  @unique
  client_secret_hash String
  registration_type  oauth_registration_type
  redirect_uris      String
  grant_types        String
  client_name        String?
  client_uri         String?
  logo_uri           String?
  created_at         DateTime                @default(now()) @db.Timestamptz(6)
  updated_at         DateTime                @default(now()) @db.Timestamptz(6)
  deleted_at         DateTime?               @db.Timestamptz(6)

  @@index([client_id])
  @@index([deleted_at])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model one_time_tokens {
  id         String              @id @db.Uuid
  user_id    String              @db.Uuid
  token_type one_time_token_type
  token_hash String
  relates_to String
  created_at DateTime            @default(now()) @db.Timestamp(6)
  updated_at DateTime            @default(now()) @db.Timestamp(6)
  users      auth_users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_type])
  @@index([relates_to], map: "one_time_tokens_relates_to_hash_idx", type: Hash)
  @@index([token_hash], map: "one_time_tokens_token_hash_hash_idx", type: Hash)
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  name_id_format    String?
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  refreshed_at   DateTime?        @db.Timestamp(6)
  user_agent     String?
  ip             String?          @db.Inet
  tag            String?
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          auth_users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  disabled          Boolean?
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@index([resource_id], map: "sso_providers_resource_id_pattern_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model auth_users {
  instance_id                                   String?           @db.Uuid
  id                                            String            @id @db.Uuid
  aud                                           String?           @db.VarChar(255)
  role                                          String?           @db.VarChar(255)
  email                                         String?           @db.VarChar(255)
  encrypted_password                            String?           @db.VarChar(255)
  email_confirmed_at                            DateTime?         @db.Timestamptz(6)
  invited_at                                    DateTime?         @db.Timestamptz(6)
  confirmation_token                            String?           @db.VarChar(255)
  confirmation_sent_at                          DateTime?         @db.Timestamptz(6)
  recovery_token                                String?           @db.VarChar(255)
  recovery_sent_at                              DateTime?         @db.Timestamptz(6)
  email_change_token_new                        String?           @db.VarChar(255)
  email_change                                  String?           @db.VarChar(255)
  email_change_sent_at                          DateTime?         @db.Timestamptz(6)
  last_sign_in_at                               DateTime?         @db.Timestamptz(6)
  raw_app_meta_data                             Json?
  raw_user_meta_data                            Json?
  is_super_admin                                Boolean?
  created_at                                    DateTime?         @db.Timestamptz(6)
  updated_at                                    DateTime?         @db.Timestamptz(6)
  phone                                         String?           @unique
  phone_confirmed_at                            DateTime?         @db.Timestamptz(6)
  phone_change                                  String?           @default("")
  phone_change_token                            String?           @default("") @db.VarChar(255)
  phone_change_sent_at                          DateTime?         @db.Timestamptz(6)
  confirmed_at                                  DateTime?         @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current                    String?           @default("") @db.VarChar(255)
  email_change_confirm_status                   Int?              @default(0) @db.SmallInt
  banned_until                                  DateTime?         @db.Timestamptz(6)
  reauthentication_token                        String?           @default("") @db.VarChar(255)
  reauthentication_sent_at                      DateTime?         @db.Timestamptz(6)
  is_sso_user                                   Boolean           @default(false)
  deleted_at                                    DateTime?         @db.Timestamptz(6)
  is_anonymous                                  Boolean           @default(false)
  actuals_actuals_created_byTousers             actuals[]         @relation("actuals_created_byTousers")
  actuals_actuals_updated_byTousers             actuals[]         @relation("actuals_updated_byTousers")
  approvals_approvals_approved_byTousers        approvals[]       @relation("approvals_approved_byTousers")
  approvals_approvals_created_byTousers         approvals[]       @relation("approvals_created_byTousers")
  approvals_approvals_updated_byTousers         approvals[]       @relation("approvals_updated_byTousers")
  contracts_contracts_created_byTousers         contracts[]       @relation("contracts_created_byTousers")
  contracts_contracts_updated_byTousers         contracts[]       @relation("contracts_updated_byTousers")
  item_maps_item_maps_created_byTousers         item_maps[]       @relation("item_maps_created_byTousers")
  item_maps_item_maps_updated_byTousers         item_maps[]       @relation("item_maps_updated_byTousers")
  plans_plans_created_byTousers                 plans[]           @relation("plans_created_byTousers")
  plans_plans_updated_byTousers                 plans[]           @relation("plans_updated_byTousers")
  registrations_registrations_created_byTousers registrations[]   @relation("registrations_created_byTousers")
  registrations_registrations_updated_byTousers registrations[]   @relation("registrations_updated_byTousers")
  reservations_reservations_created_byTousers   reservations[]    @relation("reservations_created_byTousers")
  reservations_reservations_updated_byTousers   reservations[]    @relation("reservations_updated_byTousers")
  stores_stores_created_byTousers               stores[]          @relation("stores_created_byTousers")
  stores_stores_updated_byTousers               stores[]          @relation("stores_updated_byTousers")
  users                                         app_users?
  identities                                    identities[]
  mfa_factors                                   mfa_factors[]
  one_time_tokens                               one_time_tokens[]
  sessions                                      sessions[]

  @@index([instance_id])
  @@index([is_anonymous])
  @@map("users")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model billing_change_logs {
  id                       String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id                   String                   @db.Uuid
  billing_record_id        String                   @db.Uuid
  billing_item_id          String?                  @db.Uuid
  change_type              billing_change_type
  field_name               String?                  @db.VarChar(100)
  old_value                String?
  new_value                String?
  change_reason            String?
  changed_by               String                   @db.Uuid
  changed_at               DateTime                 @default(now()) @db.Timestamptz(6)
  end_user_billing_items   end_user_billing_items?  @relation(fields: [billing_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  end_user_billing_records end_user_billing_records @relation(fields: [billing_record_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                    public_users             @relation(fields: [changed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations            organizations            @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([changed_at(sort: Desc)], map: "idx_billing_change_logs_changed_at")
  @@index([changed_by], map: "idx_billing_change_logs_changed_by")
  @@index([billing_record_id], map: "idx_billing_change_logs_record")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model public_billing_items {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id                 String                   @db.Uuid
  billing_record_id      String                   @db.Uuid
  price_master_id        String                   @db.Uuid
  item_name              String                   @db.VarChar(255)
  quantity               Decimal                  @db.Decimal(10, 3)
  unit_price             Decimal                  @db.Decimal(10, 2)
  amount                 Decimal                  @db.Decimal(10, 2)
  tax_category           tax_category
  tax_amount             Decimal                  @db.Decimal(10, 2)
  total_amount           Decimal                  @db.Decimal(10, 2)
  created_at             DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?                @db.Timestamptz(6)
  created_by             String?                  @db.Uuid
  updated_by             String?                  @db.Uuid
  deleted_at             DateTime?                @db.Timestamptz(6)
  organizations          organizations            @relation(fields: [org_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_billing_item_org")
  price_masters          price_masters            @relation(fields: [price_master_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_billing_item_price_master")
  billing_records        billing_records          @relation(fields: [billing_record_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_billing_item_record")
  end_user_billing_items end_user_billing_items[]

  @@index([billing_record_id, price_master_id], map: "idx_billing_item_aggregation")
  @@index([price_master_id], map: "idx_billing_item_price_master")
  @@index([billing_record_id], map: "idx_billing_item_record")
  @@map("billing_items")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model billing_records {
  id                                        String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id                                    String                 @db.Uuid
  collector_id                              String                 @db.Uuid
  store_id                                  String                 @db.Uuid
  billing_period                            String                 @db.VarChar(7)
  billing_type                              billing_type
  reference_id                              String?                @db.Uuid
  subtotal                                  Decimal                @db.Decimal(10, 2)
  tax_amount                                Decimal                @db.Decimal(10, 2)
  total_amount                              Decimal                @db.Decimal(10, 2)
  status                                    billing_status         @default(DRAFT)
  approved_by                               String?                @db.Uuid
  approved_at                               DateTime?              @db.Timestamptz(6)
  notes                                     String?
  created_at                                DateTime               @default(now()) @db.Timestamptz(6)
  updated_at                                DateTime?              @db.Timestamptz(6)
  created_by                                String?                @db.Uuid
  updated_by                                String?                @db.Uuid
  deleted_at                                DateTime?              @db.Timestamptz(6)
  billing_items                             public_billing_items[]
  users_billing_records_approved_byTousers  public_users?          @relation("billing_records_approved_byTousers", fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_billing_record_approved_by")
  users_billing_records_collector_idTousers public_users           @relation("billing_records_collector_idTousers", fields: [collector_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_billing_record_collector")
  organizations                             organizations          @relation(fields: [org_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_billing_record_org")
  stores                                    stores                 @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_billing_record_store")

  @@index([org_id, billing_period], map: "idx_billing_record_org_period")
  @@index([collector_id, billing_period, status], map: "idx_billing_record_period")
  @@index([store_id, billing_period], map: "idx_billing_record_store_period")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model closing_date_settings {
  id                                             String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id                                         String                    @db.Uuid
  setting_type                                   closing_date_setting_type
  end_user_id                                    String?                   @db.Uuid
  closing_day                                    Int
  is_active                                      Boolean                   @default(true)
  created_at                                     DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at                                     DateTime?                 @db.Timestamptz(6)
  created_by                                     String?                   @db.Uuid
  updated_by                                     String?                   @db.Uuid
  users_closing_date_settings_created_byTousers  public_users?             @relation("closing_date_settings_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_closing_date_settings_end_user_idTousers public_users?             @relation("closing_date_settings_end_user_idTousers", fields: [end_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organizations                                  organizations             @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_closing_date_settings_updated_byTousers  public_users?             @relation("closing_date_settings_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([org_id, setting_type], map: "unique_collector_to_admin_per_org")
  @@unique([org_id, end_user_id], map: "unique_end_user_setting")
  @@index([org_id, setting_type], map: "idx_closing_date_settings_org_type")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model commission_masters {
  id                                         String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id                                     String          @db.Uuid
  price_master_id                            String          @db.Uuid
  commission_type                            commission_type
  commission_rate                            Decimal?        @db.Decimal(5, 2)
  commission_amount                          Decimal?        @db.Decimal(10, 2)
  effective_from                             DateTime        @db.Date
  effective_to                               DateTime?       @db.Date
  description                                String?
  created_at                                 DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                                 DateTime?       @db.Timestamptz(6)
  created_by                                 String?         @db.Uuid
  updated_by                                 String?         @db.Uuid
  users_commission_masters_created_byTousers public_users?   @relation("commission_masters_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations                              organizations   @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  price_masters                              price_masters   @relation(fields: [price_master_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_commission_masters_updated_byTousers public_users?   @relation("commission_masters_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([effective_from, effective_to], map: "idx_commission_masters_effective_dates")
  @@index([org_id], map: "idx_commission_masters_org")
  @@index([price_master_id], map: "idx_commission_masters_price_master")
  @@schema("public")
}

model companies {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  created_by     String?          @db.Uuid
  updated_by     String?          @db.Uuid
  deleted_at     DateTime?        @db.Timestamptz(6)
  holiday_stores holiday_stores[]

  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model end_user_billing_items {
  id                       String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id                   String                   @db.Uuid
  billing_record_id        String                   @db.Uuid
  source_billing_item_id   String                   @db.Uuid
  item_name                String                   @db.VarChar(255)
  quantity                 Decimal                  @db.Decimal(10, 3)
  original_unit_price      Decimal                  @db.Decimal(10, 2)
  commission_rate          Decimal?                 @db.Decimal(5, 2)
  commission_amount        Decimal?                 @db.Decimal(10, 2)
  adjusted_unit_price      Decimal                  @db.Decimal(10, 2)
  amount                   Decimal                  @db.Decimal(10, 2)
  tax_category             tax_category
  tax_amount               Decimal                  @db.Decimal(10, 2)
  total_amount             Decimal                  @db.Decimal(10, 2)
  created_at               DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?                @db.Timestamptz(6)
  billing_change_logs      billing_change_logs[]
  end_user_billing_records end_user_billing_records @relation(fields: [billing_record_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organizations            organizations            @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  billing_items            public_billing_items     @relation(fields: [source_billing_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([org_id], map: "idx_end_user_billing_items_org")
  @@index([billing_record_id], map: "idx_end_user_billing_items_record")
  @@index([source_billing_item_id], map: "idx_end_user_billing_items_source")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model end_user_billing_records {
  id                                                String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id                                            String                   @db.Uuid
  end_user_id                                       String                   @db.Uuid
  billing_period                                    String                   @db.VarChar(7)
  closing_date                                      DateTime                 @db.Date
  status                                            end_user_billing_status  @default(DRAFT)
  subtotal                                          Decimal                  @default(0) @db.Decimal(10, 2)
  tax_amount                                        Decimal                  @default(0) @db.Decimal(10, 2)
  total_amount                                      Decimal                  @default(0) @db.Decimal(10, 2)
  tax_breakdown                                     Json?
  commission_total                                  Decimal                  @default(0) @db.Decimal(10, 2)
  original_total                                    Decimal                  @default(0) @db.Decimal(10, 2)
  notes                                             String?
  created_at                                        DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at                                        DateTime?                @db.Timestamptz(6)
  created_by                                        String?                  @db.Uuid
  updated_by                                        String?                  @db.Uuid
  billing_change_logs                               billing_change_logs[]
  end_user_billing_items                            end_user_billing_items[]
  users_end_user_billing_records_created_byTousers  public_users?            @relation("end_user_billing_records_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_end_user_billing_records_end_user_idTousers public_users             @relation("end_user_billing_records_end_user_idTousers", fields: [end_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organizations                                     organizations            @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_end_user_billing_records_updated_byTousers  public_users?            @relation("end_user_billing_records_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([org_id, end_user_id, billing_period], map: "unique_end_user_billing_period")
  @@index([end_user_id], map: "idx_end_user_billing_records_end_user")
  @@index([org_id], map: "idx_end_user_billing_records_org")
  @@index([billing_period], map: "idx_end_user_billing_records_period")
  @@index([status], map: "idx_end_user_billing_records_status")
  @@schema("public")
}

model holiday_stores {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  company_id        String              @db.Uuid
  name              String
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  updated_at        DateTime            @default(now()) @db.Timestamptz(6)
  created_by        String?             @db.Uuid
  updated_by        String?             @db.Uuid
  deleted_at        DateTime?           @db.Timestamptz(6)
  companies         companies           @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  store_waste_types store_waste_types[]
  survey_responses  survey_responses[]

  @@schema("public")
}

model holiday_surveys {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title             String
  template_id       String?             @db.Uuid
  start_date        DateTime            @db.Timestamptz(6)
  end_date          DateTime            @db.Timestamptz(6)
  response_deadline DateTime?           @db.Timestamptz(6)
  status            String?             @default("DRAFT")
  last_sent_at      DateTime?           @db.Timestamptz(6)
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  updated_at        DateTime            @default(now()) @db.Timestamptz(6)
  created_by        String?             @db.Uuid
  updated_by        String?             @db.Uuid
  deleted_at        DateTime?           @db.Timestamptz(6)
  survey_templates  survey_templates?   @relation(fields: [template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  survey_comments   survey_comments[]
  survey_recipients survey_recipients[]
  survey_responses  survey_responses[]

  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model price_masters {
  id                 String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id             String                 @db.Uuid
  collector_id       String                 @db.Uuid
  waste_type_id      String                 @db.Uuid
  store_id           String?                @db.Uuid
  price_category     price_category
  unit_price         Decimal                @db.Decimal(10, 2)
  unit               unit_type
  currency           String                 @default("JPY") @db.VarChar(3)
  tax_category       tax_category           @default(TAXABLE_10)
  tax_rate           Decimal                @default(10.00) @db.Decimal(5, 2)
  effective_from     DateTime               @db.Date
  effective_to       DateTime?              @db.Date
  is_active          Boolean                @default(true)
  description        String?
  minimum_charge     Decimal?               @db.Decimal(10, 2)
  maximum_charge     Decimal?               @db.Decimal(10, 2)
  created_at         DateTime               @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?              @db.Timestamptz(6)
  created_by         String?                @db.Uuid
  updated_by         String?                @db.Uuid
  deleted_at         DateTime?              @db.Timestamptz(6)
  billing_items      public_billing_items[]
  commission_masters commission_masters[]
  users              public_users           @relation(fields: [collector_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_price_master_collector")
  organizations      organizations          @relation(fields: [org_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_price_master_org")
  stores             stores?                @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_price_master_store")
  waste_types        waste_types            @relation(fields: [waste_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_price_master_waste_type")

  @@index([effective_from, effective_to], map: "idx_price_master_effective_date")
  @@index([org_id, collector_id], map: "idx_price_master_org_collector")
  @@schema("public")
}

model store_waste_types {
  id             String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  store_id       String         @db.Uuid
  waste_type_id  String         @db.Uuid
  created_at     DateTime       @default(now()) @db.Timestamptz(6)
  updated_at     DateTime       @default(now()) @db.Timestamptz(6)
  created_by     String?        @db.Uuid
  updated_by     String?        @db.Uuid
  deleted_at     DateTime?      @db.Timestamptz(6)
  holiday_stores holiday_stores @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  waste_types    waste_types    @relation(fields: [waste_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model survey_comments {
  id                    String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  survey_id             String            @db.Uuid
  user_id               String            @db.Uuid
  parent_comment_id     String?           @db.Uuid
  content               String
  is_internal           Boolean?          @default(false)
  status                String?           @default("ACTIVE")
  created_at            DateTime          @default(now()) @db.Timestamptz(6)
  updated_at            DateTime          @default(now()) @db.Timestamptz(6)
  created_by            String?           @db.Uuid
  updated_by            String?           @db.Uuid
  deleted_at            DateTime?         @db.Timestamptz(6)
  survey_comments       survey_comments?  @relation("survey_commentsTosurvey_comments", fields: [parent_comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_survey_comments survey_comments[] @relation("survey_commentsTosurvey_comments")
  holiday_surveys       holiday_surveys   @relation(fields: [survey_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                 public_users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model survey_recipients {
  id              String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  survey_id       String          @db.Uuid
  collector_id    String          @db.Uuid
  status          String?         @default("PENDING")
  sent_at         DateTime?       @db.Timestamptz(6)
  created_at      DateTime        @default(now()) @db.Timestamptz(6)
  updated_at      DateTime        @default(now()) @db.Timestamptz(6)
  created_by      String?         @db.Uuid
  updated_by      String?         @db.Uuid
  deleted_at      DateTime?       @db.Timestamptz(6)
  users           public_users    @relation(fields: [collector_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  holiday_surveys holiday_surveys @relation(fields: [survey_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model survey_responses {
  id              String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  survey_id       String          @db.Uuid
  collector_id    String          @db.Uuid
  store_id        String          @db.Uuid
  waste_type_id   String          @db.Uuid
  responses       Json            @default("[]")
  status          String?         @default("DRAFT")
  created_at      DateTime        @default(now()) @db.Timestamptz(6)
  updated_at      DateTime        @default(now()) @db.Timestamptz(6)
  created_by      String?         @db.Uuid
  updated_by      String?         @db.Uuid
  deleted_at      DateTime?       @db.Timestamptz(6)
  users           public_users    @relation(fields: [collector_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  holiday_stores  holiday_stores  @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  holiday_surveys holiday_surveys @relation(fields: [survey_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  waste_types     waste_types     @relation(fields: [waste_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model survey_templates {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title           String
  content         String?
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @default(now()) @db.Timestamptz(6)
  created_by      String?           @db.Uuid
  updated_by      String?           @db.Uuid
  deleted_at      DateTime?         @db.Timestamptz(6)
  holiday_surveys holiday_surveys[]

  @@schema("public")
}

model public_users {
  id                                                                   String                        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                                                                String                        @unique
  name                                                                 String
  role                                                                 String
  company_name                                                         String?
  phone                                                                String?
  address                                                              String?
  is_active                                                            Boolean?                      @default(true)
  org_id                                                               String?
  contact_person                                                       String?
  license_number                                                       String?
  service_areas                                                        String[]
  waste_types                                                          String[]
  collection_schedule                                                  Json?
  special_notes                                                        String?
  created_at                                                           DateTime                      @default(now()) @db.Timestamptz(6)
  updated_at                                                           DateTime                      @default(now()) @db.Timestamptz(6)
  created_by                                                           String?                       @db.Uuid
  updated_by                                                           String?                       @db.Uuid
  deleted_at                                                           DateTime?                     @db.Timestamptz(6)
  collection_requests                                                  collection_requests[]
  store_collector_assignments                                          store_collector_assignments[]
  billing_change_logs                                                  billing_change_logs[]
  billing_records_billing_records_approved_byTousers                   billing_records[]             @relation("billing_records_approved_byTousers")
  billing_records_billing_records_collector_idTousers                  billing_records[]             @relation("billing_records_collector_idTousers")
  closing_date_settings_closing_date_settings_created_byTousers        closing_date_settings[]       @relation("closing_date_settings_created_byTousers")
  closing_date_settings_closing_date_settings_end_user_idTousers       closing_date_settings[]       @relation("closing_date_settings_end_user_idTousers")
  closing_date_settings_closing_date_settings_updated_byTousers        closing_date_settings[]       @relation("closing_date_settings_updated_byTousers")
  commission_masters_commission_masters_created_byTousers              commission_masters[]          @relation("commission_masters_created_byTousers")
  commission_masters_commission_masters_updated_byTousers              commission_masters[]          @relation("commission_masters_updated_byTousers")
  end_user_billing_records_end_user_billing_records_created_byTousers  end_user_billing_records[]    @relation("end_user_billing_records_created_byTousers")
  end_user_billing_records_end_user_billing_records_end_user_idTousers end_user_billing_records[]    @relation("end_user_billing_records_end_user_idTousers")
  end_user_billing_records_end_user_billing_records_updated_byTousers  end_user_billing_records[]    @relation("end_user_billing_records_updated_byTousers")
  price_masters                                                        price_masters[]
  survey_comments                                                      survey_comments[]
  survey_recipients                                                    survey_recipients[]
  survey_responses                                                     survey_responses[]

  @@map("users")
  @@schema("public")
}

model waste_types {
  id                  String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                String
  code                String?
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  updated_at          DateTime              @default(now()) @db.Timestamptz(6)
  created_by          String?               @db.Uuid
  updated_by          String?               @db.Uuid
  deleted_at          DateTime?             @db.Timestamptz(6)
  collection_requests collection_requests[]
  price_masters       price_masters[]
  store_waste_types   store_waste_types[]
  survey_responses    survey_responses[]

  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum oauth_registration_type {
  dynamic
  manual

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}

enum app_role {
  ADMIN
  EMITTER
  TRANSPORTER
  DISPOSER

  @@schema("public")
}

enum billing_change_type {
  COMMISSION_RATE
  COMMISSION_AMOUNT
  ITEM_ADDED
  ITEM_REMOVED
  STATUS_CHANGED

  @@schema("public")
}

enum billing_status {
  DRAFT
  COLLECTOR_CONFIRMED
  ADMIN_APPROVED
  FINALIZED

  @@schema("public")
}

enum billing_type {
  MONTHLY_FIXED
  SPOT_ACTUAL

  @@schema("public")
}

enum closing_date_setting_type {
  COLLECTOR_TO_ADMIN
  ADMIN_TO_END_USER

  @@schema("public")
}

enum commission_type {
  PERCENTAGE
  FIXED_AMOUNT

  @@schema("public")
}

enum end_user_billing_status {
  DRAFT
  FINALIZED
  SENT

  @@schema("public")
}

enum price_category {
  TRANSPORT
  DISPOSAL
  FIXED_MONTHLY
  OTHER_FEES
  OTHER

  @@schema("public")
}

enum reg_status {
  RESERVED
  FAILED
  PENDING
  REGISTERED
  ERROR

  @@schema("public")
}

enum tax_category {
  TAXABLE_10
  TAXABLE_8
  TAX_FREE

  @@schema("public")
}

enum unit {
  T
  KG
  M3

  @@schema("public")
}

enum unit_type {
  PER_VEHICLE
  PER_M3
  PER_KG
  PER_MONTH
  PER_ITEM

  @@schema("public")
}
