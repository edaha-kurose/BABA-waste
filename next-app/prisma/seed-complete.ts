// ============================================================================
// ÂÆåÂÖ®ÁâàSeed„Çπ„ÇØ„É™„Éó„Éà: Ë´ãÊ±ÇÊ©üËÉΩ„Å´ÂøÖÈ†à„ÅÆ„Éû„Çπ„Çø„Éº„Éá„Éº„Çø + „Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥„Éá„Éº„Çø
// ============================================================================

import { config } from 'dotenv';
import { resolve } from 'path';
config({ path: resolve(__dirname, '../.env.local') });

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const ORG_ID = '12345678-1234-1234-1234-123456789012'; // „Éá„É¢ÁµÑÁπî
const ADMIN_AUTH_USER_ID = '1a9eb299-e83a-49fe-bf3c-48aa37646d6d';

const log = {
  section: (msg: string) => console.log(`\n${'='.repeat(60)}\n${msg}`),
  info: (msg: string) => console.log(`‚ÑπÔ∏è  ${msg}`),
  success: (msg: string) => console.log(`‚úÖ ${msg}`),
  error: (msg: string) => console.error(`‚ùå ${msg}`),
};

async function main() {
  log.section('üå± ÂÆåÂÖ®Áâà„Ç∑„Éº„ÉâÈñãÂßã');

  try {
    // ============================================================================
    // 1. ÂèéÈõÜÊ•≠ËÄÖÂèñÂæó
    // ============================================================================
    log.section('üöö ÂèéÈõÜÊ•≠ËÄÖÁ¢∫Ë™ç');
    
    const collector = await prisma.collectors.findFirst({
      where: { org_id: ORG_ID },
    });

    if (!collector) {
      throw new Error('ÂèéÈõÜÊ•≠ËÄÖ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇÂÖà„Å´seed-final.ts„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    }

    log.success(`ÂèéÈõÜÊ•≠ËÄÖ: ${collector.company_name}`);

    // ============================================================================
    // 2. ÂªÉÊ£ÑÁâ©Á®ÆÂà•„Éû„Çπ„Çø„Éº‰ΩúÊàêÔºàÂçò‰æ°Ë®≠ÂÆöËæº„ÅøÔºâ
    // ============================================================================
    log.section('üóëÔ∏è  ÂªÉÊ£ÑÁâ©Á®ÆÂà•„Éû„Çπ„Çø„Éº‰ΩúÊàê');

    const wasteTypes = [
      { code: 'W01', name: 'ÁáÉ„ÅàÊÆª', category: 'ÁáÉ„ÅàÊÆª', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'TON', unit_price: 15000, is_hazardous: false },
      { code: 'W02', name: 'Ê±öÊ≥•', category: 'Ê±öÊ≥•', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'TON', unit_price: 20000, is_hazardous: false },
      { code: 'W03', name: 'ÂªÉÊ≤π', category: 'ÂªÉÊ≤π', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'L', unit_price: 50, is_hazardous: true },
      { code: 'W04', name: 'ÂªÉÈÖ∏', category: 'ÂªÉÈÖ∏', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'L', unit_price: 60, is_hazardous: true },
      { code: 'W05', name: 'ÂªÉ„Ç¢„É´„Ç´„É™', category: 'ÂªÉ„Ç¢„É´„Ç´„É™', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'L', unit_price: 60, is_hazardous: true },
      { code: 'W06', name: 'ÂªÉ„Éó„É©„Çπ„ÉÅ„ÉÉ„ÇØÈ°û', category: 'ÂªÉ„Éó„É©„Çπ„ÉÅ„ÉÉ„ÇØ', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'KG', unit_price: 30, is_hazardous: false },
      { code: 'W07', name: 'Á¥ô„Åè„Åö', category: 'Á¥ô„Åè„Åö', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'KG', unit_price: 10, is_hazardous: false },
      { code: 'W08', name: 'Êú®„Åè„Åö', category: 'Êú®„Åè„Åö', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'TON', unit_price: 8000, is_hazardous: false },
      { code: 'W09', name: 'ÁπäÁ∂≠„Åè„Åö', category: 'ÁπäÁ∂≠„Åè„Åö', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'KG', unit_price: 15, is_hazardous: false },
      { code: 'W10', name: 'ÂãïÊ§çÁâ©ÊÄßÊÆã„Åï', category: 'ÂãïÊ§çÁâ©ÊÄßÊÆã„Åï', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'KG', unit_price: 20, is_hazardous: false },
      { code: 'W11', name: '„Ç¥„É†„Åè„Åö', category: '„Ç¥„É†„Åè„Åö', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'KG', unit_price: 25, is_hazardous: false },
      { code: 'W12', name: 'ÈáëÂ±û„Åè„Åö', category: 'ÈáëÂ±û„Åè„Åö', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'TON', unit_price: 5000, is_hazardous: false },
      { code: 'W13', name: '„Ç¨„É©„Çπ„ÉªÈô∂Á£ÅÂô®„Åè„Åö', category: '„Ç¨„É©„Çπ', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'TON', unit_price: 12000, is_hazardous: false },
      { code: 'W14', name: 'Èâ±„Åï„ÅÑ', category: 'Èâ±„Åï„ÅÑ', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'TON', unit_price: 18000, is_hazardous: false },
      { code: 'W15', name: '„Åå„Çå„ÅçÈ°û', category: '„Åå„Çå„ÅçÈ°û', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'TON', unit_price: 7000, is_hazardous: false },
      { code: 'W16', name: '„Å∞„ÅÑ„Åò„Çì', category: '„Å∞„ÅÑ„Åò„Çì', classification: 'ÁâπÂà•ÁÆ°ÁêÜÁî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'TON', unit_price: 25000, is_hazardous: true },
      { code: 'W17', name: 'ËõçÂÖâÁÅØ', category: 'ËõçÂÖâÁÅØ', classification: 'ÁâπÂà•ÁÆ°ÁêÜÁî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'PCS', unit_price: 100, is_hazardous: true },
      { code: 'W18', name: 'ÈõªÊ±†', category: 'ÈõªÊ±†', classification: 'ÁâπÂà•ÁÆ°ÁêÜÁî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'KG', unit_price: 80, is_hazardous: true },
      { code: 'W19', name: 'Ê∑∑ÂêàÂªÉÊ£ÑÁâ©', category: 'Ê∑∑ÂêàÂªÉÊ£ÑÁâ©', classification: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©', unit: 'TON', unit_price: 22000, is_hazardous: false },
      { code: 'W20', name: '‰∏ÄËà¨ÂªÉÊ£ÑÁâ©', category: '‰∏ÄËà¨ÂªÉÊ£ÑÁâ©', classification: '‰∏ÄËà¨ÂªÉÊ£ÑÁâ©', unit: 'KG', unit_price: 25, is_hazardous: false },
    ];

    const createdWasteTypes = [];
    for (const wt of wasteTypes) {
      const created = await prisma.waste_type_masters.upsert({
        where: {
          org_id_collector_id_waste_type_code: {
            org_id: ORG_ID,
            collector_id: collector.id,
            waste_type_code: wt.code,
          },
        },
        create: {
          org_id: ORG_ID,
          collector_id: collector.id,
          waste_type_code: wt.code,
          waste_type_name: wt.name,
          waste_category: wt.category,
          waste_classification: wt.classification,
          unit_code: wt.unit,
          unit_price: wt.unit_price,
          created_by: ADMIN_AUTH_USER_ID,
          updated_by: ADMIN_AUTH_USER_ID,
        },
        update: {
          waste_type_name: wt.name,
          waste_category: wt.category,
          waste_classification: wt.classification,
          unit_code: wt.unit,
          unit_price: wt.unit_price,
          deleted_at: null,
          updated_at: new Date(),
        },
      });
      createdWasteTypes.push(created);
    }

    log.success(`ÂªÉÊ£ÑÁâ©Á®ÆÂà•„Éû„Çπ„Çø„Éº: ${createdWasteTypes.length}‰ª∂`);

    // ============================================================================
    // 3. Â•ëÁ¥Ñ„Éû„Çπ„Çø„Éº‰ΩúÊàê
    // ============================================================================
    log.section('üìÑ Â•ëÁ¥Ñ„Éû„Çπ„Çø„Éº‰ΩúÊàê');

    const stores = await prisma.stores.findMany({
      where: { org_id: ORG_ID },
      take: 10,
    });

    if (stores.length === 0) {
      throw new Error('Â∫óËàó„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇÂÖà„Å´seed-final.ts„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    }

    // contracts„ÉÜ„Éº„Éñ„É´„Å´uniqueÂà∂Á¥Ñ„Åå„Å™„ÅÑ„Åü„ÇÅ„ÄÅÊó¢Â≠ò„ÉÅ„Çß„ÉÉ„ÇØÂæå„Å´‰ΩúÊàê
    const existingContracts = await prisma.contracts.findMany({
      where: {
        org_id: ORG_ID,
        emitter_id: ORG_ID,
      },
    });

    const contracts = [];
    if (existingContracts.length === 0) {
      // „Éá„É¢Áî®„Å´1‰ª∂‰ΩúÊàêÔºàÊéíÂá∫‰∫ãÊ•≠ËÄÖ=ÂèéÈõÜÊ•≠ËÄÖ=„Éá„É¢ÁµÑÁπîÔºâ
      const contract = await prisma.contracts.create({
        data: {
          org_id: ORG_ID,
          emitter_id: ORG_ID, // ÊéíÂá∫‰∫ãÊ•≠ËÄÖÔºà„Éá„É¢ÁµÑÁπîÔºâ
          transporter_id: ORG_ID, // ÂèéÈõÜÈÅãÊê¨Ê•≠ËÄÖÔºà„Éá„É¢ÁµÑÁπîÔºâ
          disposer_id: null,
          scope: { description: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©„ÅÆÂèéÈõÜÈÅãÊê¨' },
          valid_from: new Date('2024-01-01'),
          valid_to: new Date('2024-12-31'),
          created_by: ADMIN_AUTH_USER_ID,
          updated_by: ADMIN_AUTH_USER_ID,
        },
      });
      contracts.push(contract);
    } else {
      contracts.push(...existingContracts);
    }

    log.success(`Â•ëÁ¥Ñ„Éû„Çπ„Çø„Éº: ${contracts.length}‰ª∂`);

    // ============================================================================
    // 4. Ë´ãÊ±ÇÊòéÁ¥∞‰ΩúÊàêÔºàÂÆüÁ∏æ„Éá„Éº„Çø„Åã„ÇâÁîüÊàêÔºâ
    // ============================================================================
    log.section('üí∞ Ë´ãÊ±ÇÊòéÁ¥∞‰ΩúÊàê');

    const allActuals = await prisma.actuals.findMany({
      where: {
        org_id: ORG_ID,
      },
      include: {
        plans: {
          include: {
            stores: true,
            item_maps: true,
          },
        },
      },
      take: 100,
    });

    // confirmed_at„Åånull„Åß„Å™„ÅÑ„ÇÇ„ÅÆ„Å†„Åë„Éï„Ç£„É´„Çø
    const actuals = allActuals.filter((a) => a.confirmed_at !== null);

    log.info(`ÂÆüÁ∏æ„Éá„Éº„Çø: ${actuals.length}‰ª∂`);

    const billingItems = [];
    for (const actual of actuals) {
      if (!actual.plans || !actual.confirmed_at) continue;

      const store = actual.plans.stores;
      const itemMap = actual.plans.item_maps;

      // ÂØæÂøú„Åô„ÇãÂªÉÊ£ÑÁâ©Á®ÆÂà•„Éû„Çπ„Çø„Éº„ÇíÊ§úÁ¥¢
      const wasteType = createdWasteTypes.find((wt) =>
        itemMap.item_label.includes(wt.waste_type_name.substring(0, 3))
      ) || createdWasteTypes[0];

      const quantity = Number(actual.actual_qty);
      const unitPrice = Number(wasteType.unit_price || 0);
      const amount = quantity * unitPrice;
      const taxRate = 0.1;
      const taxAmount = Math.floor(amount * taxRate);
      const totalAmount = amount + taxAmount;

      const billingMonth = new Date(
        actual.confirmed_at.getFullYear(),
        actual.confirmed_at.getMonth(),
        1
      );

      const billingItem = await prisma.app_billing_items.create({
        data: {
          org_id: ORG_ID,
          collector_id: collector.id,
          store_id: store.id,
          collection_id: null,
          billing_month: billingMonth,
          billing_period_from: actual.confirmed_at,
          billing_period_to: actual.confirmed_at,
          billing_type: 'standard',
          item_name: `${itemMap.item_label} ÂèéÈõÜÈÅãÊê¨`,
          waste_type_id: wasteType.id,
          quantity: quantity,
          unit: wasteType.unit_code,
          unit_price: unitPrice,
          amount: amount,
          tax_rate: taxRate,
          tax_amount: taxAmount,
          total_amount: totalAmount,
          created_by: ADMIN_AUTH_USER_ID,
          updated_by: ADMIN_AUTH_USER_ID,
        },
      });

      billingItems.push(billingItem);
    }

    log.success(`Ë´ãÊ±ÇÊòéÁ¥∞: ${billingItems.length}‰ª∂`);

    // ============================================================================
    // 5. „Éá„Éº„ÇøÁ¢∫Ë™ç
    // ============================================================================
    log.section('üìä „Éá„Éº„ÇøÁ¢∫Ë™ç');

    const counts = {
      waste_type_masters: await prisma.waste_type_masters.count({
        where: { org_id: ORG_ID },
      }),
      contracts: await prisma.contracts.count({
        where: { org_id: ORG_ID },
      }),
      app_billing_items: await prisma.app_billing_items.count({
        where: { org_id: ORG_ID },
      }),
    };

    log.info(`ÂªÉÊ£ÑÁâ©Á®ÆÂà•„Éû„Çπ„Çø„Éº: ${counts.waste_type_masters}‰ª∂`);
    log.info(`Â•ëÁ¥Ñ: ${counts.contracts}‰ª∂`);
    log.info(`Ë´ãÊ±ÇÊòéÁ¥∞: ${counts.app_billing_items}‰ª∂`);

    if (
      counts.waste_type_masters > 0 &&
      counts.contracts > 0 &&
      counts.app_billing_items > 0
    ) {
      log.success('‚úÖ ÂÖ®„Å¶„ÅÆÂøÖÈ†à„Éû„Çπ„Çø„Éº„Éá„Éº„Çø„Åå‰ΩúÊàê„Åï„Çå„Åæ„Åó„ÅüÔºÅ');
    } else {
      log.error('‚ö†Ô∏è  ‰∏ÄÈÉ®„ÅÆ„Éá„Éº„Çø„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô');
    }
  } catch (error) {
    log.error(`„Ç®„É©„Éº: ${error}`);
    throw error;
  }
}

main()
  .then(async () => {
    await prisma.$disconnect();
    process.exit(0);
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });
