/**
 * billing_items „Å® billing_summaries „ÅÆ billing_month „ÇíÊúàÂàù„Å´‰øÆÊ≠£„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
 */

import { prisma } from '../src/lib/prisma'

async function main() {
  console.log('\nüîß billing_month „ÇíÊúàÂàù„Å´‰∏ÄÊã¨‰øÆÊ≠£\n')

  const cosmosOrgId = '00000000-0000-0000-0000-000000000001'

  // 1. billing_items „Çí‰øÆÊ≠£
  console.log('üìù billing_items „Çí‰øÆÊ≠£‰∏≠...')
  
  const items = await prisma.app_billing_items.findMany({
    where: {
      org_id: cosmosOrgId,
      deleted_at: null,
    },
    select: {
      id: true,
      billing_month: true,
    },
  })

  let itemsUpdated = 0
  for (const item of items) {
    const currentMonth = item.billing_month
    const year = currentMonth.getFullYear()
    const month = currentMonth.getMonth() // 0-11
    
    // Êó¢„Å´ÊúàÂàù„ÅÆÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
    if (currentMonth.getDate() === 1) {
      continue
    }

    // ÊúàÂàù„Å´Â§âÊõ¥
    const firstDayOfMonth = new Date(year, month, 1)
    
    await prisma.app_billing_items.update({
      where: {
        id: item.id,
      },
      data: {
        billing_month: firstDayOfMonth,
      },
    })

    itemsUpdated++
  }

  console.log(`‚úÖ billing_items: ${itemsUpdated}‰ª∂„ÇíÊõ¥Êñ∞\n`)

  // 2. billing_summaries „ÇíÂâäÈô§
  console.log('üóëÔ∏è  billing_summaries „ÇíÂâäÈô§‰∏≠...')
  
  const deletedCount = await prisma.billing_summaries.deleteMany({
    where: {
      org_id: cosmosOrgId,
    },
  })

  console.log(`‚úÖ billing_summaries: ${deletedCount.count}‰ª∂„ÇíÂâäÈô§\n`)

  console.log('üéâ ÂÆå‰∫ÜÔºÅÊ¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó: pnpm tsx scripts/generate-cosmos-billing-summaries.ts')

  await prisma.$disconnect()
}

main().catch((err) => {
  console.error('‚ùå „Ç®„É©„Éº:', err)
  process.exit(1)
})


