/**
 * Êó¢Â≠ò„ÅÆË´ãÊ±ÇÊòéÁ¥∞„Å´ÊâãÊï∞Êñô„ÇíÈÅ©Áî®„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
 * 
 * „É≠„Ç∏„ÉÉ„ÇØ:
 * 1. commission_rules „Åã„ÇâÈÅ©Áî®ÂèØËÉΩ„Å™„É´„Éº„É´„ÇíÂèñÂæó
 * 2. ÂêÑÊòéÁ¥∞„Å´ÂØæ„Åó„Å¶„ÄÅË©≤ÂΩì„Åô„Çã„É´„Éº„É´„ÇíÈÅ©Áî®
 * 3. ÊâãÊï∞ÊñôÈ°ç„Å®Á¥îÈ°ç„ÇíË®àÁÆó
 */

import { prisma } from '../src/lib/prisma'

interface CommissionRule {
  id: string
  org_id: string
  collector_id: string | null
  billing_type: string
  commission_type: string
  commission_value: number
}

async function main() {
  console.log('\nüìä Êó¢Â≠òÊòéÁ¥∞„Å∏„ÅÆÊâãÊï∞ÊñôÈÅ©Áî®„ÇíÈñãÂßã...\n')

  // 1. ÂÖ®ÁµÑÁπî„ÅÆÊâãÊï∞Êñô„É´„Éº„É´„ÇíÂèñÂæó
  const rules = await prisma.commission_rules.findMany({
    where: {
      is_active: true,
      deleted_at: null,
      OR: [
        { effective_from: null },
        { effective_from: { lte: new Date() } },
      ],
      OR: [
        { effective_to: null },
        { effective_to: { gte: new Date() } },
      ],
    },
    orderBy: [
      { collector_id: 'asc' }, // Ê•≠ËÄÖÂõ∫Êúâ„É´„Éº„É´„ÇíÂÑ™ÂÖà
      { created_at: 'desc' },
    ],
  })

  console.log(`‚úÖ ÊâãÊï∞Êñô„É´„Éº„É´: ${rules.length}‰ª∂ÂèñÂæó\n`)

  // 2. ÊâãÊï∞Êñô„ÅåÊú™Ë®≠ÂÆö„ÅÆÊòéÁ¥∞„ÇíÂèñÂæó
  const items = await prisma.app_billing_items.findMany({
    where: {
      deleted_at: null,
      commission_amount: null,
    },
    select: {
      id: true,
      org_id: true,
      collector_id: true,
      billing_type: true,
      amount: true,
    },
  })

  console.log(`üìù ÂØæË±°ÊòéÁ¥∞: ${items.length}‰ª∂\n`)

  let updatedCount = 0
  let skippedCount = 0

  for (const item of items) {
    // 3. Ë©≤ÂΩì„Åô„Çã„É´„Éº„É´„ÇíÊ§úÁ¥¢ÔºàÊ•≠ËÄÖÂõ∫Êúâ > ÂÖ®‰ΩìÔºâ
    const applicableRule = rules.find(
      (r) =>
        r.org_id === item.org_id &&
        (r.collector_id === item.collector_id || r.collector_id === null) &&
        (r.billing_type === item.billing_type || r.billing_type === 'ALL')
    )

    if (!applicableRule) {
      skippedCount++
      continue
    }

    // 4. ÊâãÊï∞Êñô„ÇíË®àÁÆó
    let commissionAmount = 0
    let commissionRate: number | null = null

    if (applicableRule.commission_type === 'PERCENTAGE') {
      commissionRate = applicableRule.commission_value
      commissionAmount = item.amount * (applicableRule.commission_value / 100)
    } else if (applicableRule.commission_type === 'FIXED_AMOUNT') {
      commissionAmount = applicableRule.commission_value
    }

    const netAmount = item.amount - commissionAmount

    // 5. ÊòéÁ¥∞„ÇíÊõ¥Êñ∞
    await prisma.app_billing_items.update({
      where: { id: item.id },
      data: {
        commission_type: applicableRule.commission_type,
        commission_rate: commissionRate,
        commission_amount: commissionAmount,
        net_amount: netAmount,
        is_commission_manual: false,
      },
    })

    updatedCount++

    if (updatedCount % 100 === 0) {
      console.log(`  ÈÄ≤Êçó: ${updatedCount}/${items.length}‰ª∂`)
    }
  }

  console.log(`\n‚úÖ Êõ¥Êñ∞ÂÆå‰∫Ü: ${updatedCount}‰ª∂`)
  console.log(`‚è≠Ô∏è  „Çπ„Ç≠„ÉÉ„Éó: ${skippedCount}‰ª∂Ôºà„É´„Éº„É´„Å™„ÅóÔºâ\n`)

  await prisma.$disconnect()
}

main().catch((err) => {
  console.error('‚ùå „Ç®„É©„Éº:', err)
  process.exit(1)
})


