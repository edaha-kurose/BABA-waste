/**
 * ÁõÆÁöÑ: Ë´ñÁêÜÂâäÈô§„Åï„Çå„Åü item_maps „ÇíÂæ©Ê¥ª„Åï„Åõ„Çã
 * 
 * „Ç∞„É≠„Éº„Éê„É´„É´„Éº„É´Ê∫ñÊã†: PrismaÁµåÁî±„Åß„Éá„Éº„ÇøÊõ¥Êñ∞
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const TARGET_ORG_ID = '00000000-0000-0000-0000-000000000001'
const ADMIN_USER_ID = '00000000-0000-0000-0000-000000000001'

async function main() {
  console.log('üîß Ë´ñÁêÜÂâäÈô§„Åï„Çå„Åü item_maps „ÅÆÂæ©Ê¥ªÈñãÂßã...\n')

  // Step 1: Ë´ñÁêÜÂâäÈô§„Åï„Çå„Åü„É¨„Ç≥„Éº„Éâ„ÇíÂèñÂæó
  const deletedItems = await prisma.item_maps.findMany({
    where: {
      org_id: TARGET_ORG_ID,
      deleted_at: { not: null },
    },
    select: {
      id: true,
      item_label: true,
      jwnet_code: true,
    },
  })

  console.log(`üìä Âæ©Ê¥ªÂØæË±°: ${deletedItems.length}‰ª∂\n`)

  if (deletedItems.length === 0) {
    console.log('‚úÖ Âæ©Ê¥ªÂØæË±°„Å™„Åó')
    await prisma.$disconnect()
    return
  }

  let restoredCount = 0
  let errorCount = 0

  // Step 2: ÂêÑ„É¨„Ç≥„Éº„Éâ„ÇíÂæ©Ê¥ª
  for (const item of deletedItems) {
    try {
      await prisma.item_maps.update({
        where: { id: item.id },
        data: {
          deleted_at: null,
          updated_at: new Date(),
          // updated_by „ÅØÂ§ñÈÉ®„Ç≠„ÉºÂà∂Á¥Ñ„Åå„ÅÇ„Çã„Åü„ÇÅ„ÄÅÊó¢Â≠òÂÄ§„ÇíÁ∂≠ÊåÅ
        },
      })

      restoredCount++
      console.log(`‚úÖ Âæ©Ê¥ªÊàêÂäü: "${item.item_label}" (code: ${item.jwnet_code})`)
    } catch (error) {
      errorCount++
      console.error(`‚ùå Âæ©Ê¥ªÂ§±Êïó: "${item.item_label}"`, error)
    }
  }

  // Step 3: ÁµêÊûú„Çµ„Éû„É™„Éº
  console.log('\nüìã ÂÆüË°åÁµêÊûú:')
  console.log(`  ‚úÖ Âæ©Ê¥ªÊàêÂäü: ${restoredCount}‰ª∂`)
  console.log(`  ‚ùå „Ç®„É©„Éº: ${errorCount}‰ª∂`)
  console.log(`  üìä ÂêàË®à: ${deletedItems.length}‰ª∂`)

  // Step 4: Ê§úË®º
  console.log('\nüîç Ê§úË®º: ÊúâÂäπ„Å™ item_maps Á∑èÊï∞')
  const activeCount = await prisma.item_maps.count({
    where: {
      org_id: TARGET_ORG_ID,
      deleted_at: null,
    },
  })
  console.log(`  ÊúâÂäπ„É¨„Ç≥„Éº„Éâ: ${activeCount}‰ª∂`)

  await prisma.$disconnect()
}

main().catch((e) => {
  console.error('‚ùå „Ç®„É©„Éº:', e)
  process.exit(1)
})

