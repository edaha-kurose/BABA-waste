/**
 * „Ç≥„Çπ„É¢„ÇπËñ¨ÂìÅ„ÅÆbilling_month„ÇíÊúàÂàù„Å´‰øÆÊ≠£„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
 */

import { prisma } from '../src/lib/prisma'

async function main() {
  console.log('\nüîß billing_month „ÇíÊúàÂàù„Å´‰øÆÊ≠£\n')

  const cosmosOrgId = '00000000-0000-0000-0000-000000000001'

  // ÂÖ®„Çµ„Éû„É™„Éº„ÇíÂèñÂæó
  const summaries = await prisma.billing_summaries.findMany({
    where: {
      org_id: cosmosOrgId,
    },
    select: {
      id: true,
      billing_month: true,
    },
  })

  console.log(`üìä ÂØæË±°„Çµ„Éû„É™„Éº: ${summaries.length}‰ª∂\n`)

  let updatedCount = 0

  for (const summary of summaries) {
    const currentMonth = summary.billing_month
    const year = currentMonth.getFullYear()
    const month = currentMonth.getMonth() // 0-11
    
    // ÊúàÂàù„Å´Â§âÊõ¥
    const firstDayOfMonth = new Date(year, month, 1)
    
    // Êó¢„Å´ÊúàÂàù„ÅÆÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
    if (currentMonth.getDate() === 1) {
      continue
    }

    await prisma.billing_summaries.update({
      where: {
        id: summary.id,
      },
      data: {
        billing_month: firstDayOfMonth,
      },
    })

    updatedCount++
    
    const monthStr = `${year}-${String(month + 1).padStart(2, '0')}`
    console.log(`‚úÖ ${monthStr}: ${currentMonth.toISOString()} ‚Üí ${firstDayOfMonth.toISOString()}`)
  }

  console.log(`\nüéâ ÂÆå‰∫Ü: ${updatedCount}‰ª∂„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü`)

  await prisma.$disconnect()
}

main().catch((err) => {
  console.error('‚ùå „Ç®„É©„Éº:', err)
  process.exit(1)
})


