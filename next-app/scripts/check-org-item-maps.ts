/**
 * ÁõÆÁöÑ: ÁµÑÁπî„Åî„Å®„ÅÆ item_maps „Å® store_item_collectors „ÅÆÂìÅÁõÆ„ÇíÊØîËºÉ
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üîç ÁµÑÁπî„Åî„Å®„ÅÆÂìÅÁõÆ„Éû„ÉÉ„Éî„É≥„Ç∞Á¢∫Ë™ç...\n')

  const TARGET_ORG = '00000000-0000-0000-0000-000000000001'

  // Step 1: ÂØæË±°ÁµÑÁπî„ÅÆ item_maps
  console.log(`üìã ÁµÑÁπî ${TARGET_ORG} „ÅÆ item_maps:`)
  const itemMaps = await prisma.item_maps.findMany({
    where: {
      org_id: TARGET_ORG,
      deleted_at: null,
    },
    select: {
      item_label: true,
      jwnet_code: true,
    },
    orderBy: { item_label: 'asc' },
  })

  console.log(`  ÂêàË®à: ${itemMaps.length}‰ª∂`)
  itemMaps.forEach((item, i) => {
    console.log(`  ${i + 1}. "${item.item_label}" ‚Üí ${item.jwnet_code}`)
  })

  // Step 2: ÂØæË±°ÁµÑÁπî„ÅÆ store_item_collectors „ÅÆÂìÅÁõÆÔºà„É¶„Éã„Éº„ÇØÔºâ
  console.log(`\nüìã ÁµÑÁπî ${TARGET_ORG} „ÅÆ store_item_collectors „ÅÆÂìÅÁõÆ:`)
  const storeItems = await prisma.store_item_collectors.findMany({
    where: {
      org_id: TARGET_ORG,
      deleted_at: null,
    },
    distinct: ['item_name'],
    select: {
      item_name: true,
    },
    orderBy: { item_name: 'asc' },
  })

  console.log(`  ÂêàË®à: ${storeItems.length}‰ª∂`)
  storeItems.forEach((item, i) => {
    console.log(`  ${i + 1}. "${item.item_name}"`)
  })

  // Step 3: ‰∏ç‰∏ÄËá¥„É™„Çπ„Éà
  console.log(`\n‚ö†Ô∏è  item_maps „Å´Â≠òÂú®„Åó„Å™„ÅÑÂìÅÁõÆ:`)
  const itemMapLabels = new Set(itemMaps.map(im => im.item_label))
  const missing = storeItems.filter(si => !itemMapLabels.has(si.item_name))

  if (missing.length === 0) {
    console.log('  ‚úÖ „Åô„Åπ„Å¶‰∏ÄËá¥„Åó„Å¶„ÅÑ„Åæ„Åô')
  } else {
    console.log(`  ÂêàË®à: ${missing.length}‰ª∂`)
    missing.forEach((item, i) => {
      console.log(`  ${i + 1}. "${item.item_name}"`)
    })
  }

  await prisma.$disconnect()
}

main().catch((e) => {
  console.error('‚ùå „Ç®„É©„Éº:', e)
  process.exit(1)
})


