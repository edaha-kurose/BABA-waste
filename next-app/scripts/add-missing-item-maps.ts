/**
 * ÁõÆÁöÑ: ÁµÑÁπî 00000000-0000-0000-0000-000000000001 „ÅÆ item_maps „Å´‰∏çË∂≥„Åó„Å¶„ÅÑ„ÇãÂìÅÁõÆ„ÇíËøΩÂä†
 * 
 * „Ç∞„É≠„Éº„Éê„É´„É´„Éº„É´Ê∫ñÊã†: PrismaÁµåÁî±„Åß„Éá„Éº„ÇøËøΩÂä†
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const TARGET_ORG_ID = '00000000-0000-0000-0000-000000000001'
const ADMIN_USER_ID = '00000000-0000-0000-0000-000000000001' // „Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖID

// ‰ªñ„ÅÆÁµÑÁπî„Åã„ÇâÂèÇÁÖß„Åó„Å¶ÈÅ©Âàá„Å™ jwnet_code „ÇíË®≠ÂÆö
const MISSING_ITEMS = [
  { item_label: '‰∏ÄËà¨ÂªÉÊ£ÑÁâ©Ôºà‰∏çÁáÉ„Åî„ÅøÔºâ', jwnet_code: '0201-01' },
  { item_label: '‰∏ÄËà¨ÂªÉÊ£ÑÁâ©ÔºàÂèØÁáÉ„Åî„ÅøÔºâ', jwnet_code: '0101-01' },
  { item_label: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©Ôºà„Ç¨„É©„Çπ„Åè„ÅöÔºâ', jwnet_code: '1501-01' },
  { item_label: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©ÔºàÂªÉ„Éó„É©„Çπ„ÉÅ„ÉÉ„ÇØÔºâ', jwnet_code: '0701-01' },
  { item_label: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©ÔºàÂªÉÊ≤πÔºâ', jwnet_code: '0301-01' },
  { item_label: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©ÔºàÊú®„Åè„ÅöÔºâ', jwnet_code: '0901-01' },
  { item_label: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©ÔºàÁ¥ô„Åè„ÅöÔºâ', jwnet_code: '0801-01' },
  { item_label: 'Áî£Ê•≠ÂªÉÊ£ÑÁâ©ÔºàÈáëÂ±û„Åè„ÅöÔºâ', jwnet_code: '1401-01' },
]

async function main() {
  console.log('üîß item_maps „Å∏„ÅÆÂìÅÁõÆËøΩÂä†ÈñãÂßã...\n')
  console.log(`üìã ÂØæË±°ÁµÑÁπî: ${TARGET_ORG_ID}`)
  console.log(`üìä ËøΩÂä†‰∫àÂÆö: ${MISSING_ITEMS.length}‰ª∂\n`)

  let addedCount = 0
  let skippedCount = 0
  let errorCount = 0

  for (const item of MISSING_ITEMS) {
    try {
      // Êó¢Â≠ò„ÉÅ„Çß„ÉÉ„ÇØ
      const existing = await prisma.item_maps.findFirst({
        where: {
          org_id: TARGET_ORG_ID,
          item_label: item.item_label,
          deleted_at: null,
        },
      })

      if (existing) {
        console.log(`‚ö†Ô∏è  „Çπ„Ç≠„ÉÉ„Éó: "${item.item_label}" „ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô`)
        skippedCount++
        continue
      }

      // Êñ∞Ë¶èËøΩÂä†
      await prisma.item_maps.create({
        data: {
          org_id: TARGET_ORG_ID,
          item_label: item.item_label,
          jwnet_code: item.jwnet_code,
          created_by: ADMIN_USER_ID,
          updated_by: ADMIN_USER_ID,
        },
      })

      addedCount++
      console.log(`‚úÖ ËøΩÂä†ÊàêÂäü: "${item.item_label}" ‚Üí ${item.jwnet_code}`)
    } catch (error) {
      errorCount++
      console.error(`‚ùå ËøΩÂä†Â§±Êïó: "${item.item_label}"`, error)
    }
  }

  // ÁµêÊûú„Çµ„Éû„É™„Éº
  console.log('\nüìã ÂÆüË°åÁµêÊûú:')
  console.log(`  ‚úÖ ËøΩÂä†ÊàêÂäü: ${addedCount}‰ª∂`)
  console.log(`  ‚ö†Ô∏è  „Çπ„Ç≠„ÉÉ„Éó: ${skippedCount}‰ª∂`)
  console.log(`  ‚ùå „Ç®„É©„Éº: ${errorCount}‰ª∂`)
  console.log(`  üìä ÂêàË®à: ${MISSING_ITEMS.length}‰ª∂`)

  // Ê§úË®º
  console.log('\nüîç Ê§úË®º: ÁµÑÁπî„ÅÆ item_maps Á∑èÊï∞')
  const totalCount = await prisma.item_maps.count({
    where: {
      org_id: TARGET_ORG_ID,
      deleted_at: null,
    },
  })
  console.log(`  ÂêàË®à: ${totalCount}‰ª∂ÔºàËøΩÂä†Ââç: 10‰ª∂ ‚Üí ËøΩÂä†Âæå: ${totalCount}‰ª∂Ôºâ`)

  await prisma.$disconnect()
}

main().catch((e) => {
  console.error('‚ùå „Ç®„É©„Éº:', e)
  process.exit(1)
})


