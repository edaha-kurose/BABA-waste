/**
 * ÁõÆÁöÑ: item_maps „Å® store_item_collectors „ÅÆ item_name/item_label „ÅÆ‰∏ç‰∏ÄËá¥„ÇíÁ¢∫Ë™ç
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üîç „Éá„Éº„ÇøÁ¢∫Ë™çÈñãÂßã...\n')

  // Step 1: item_maps „ÅÆ item_label ‰∏ÄË¶ß
  console.log('üìã item_maps „ÉÜ„Éº„Éñ„É´„ÅÆ item_label ‰∏ÄË¶ß:')
  const itemMaps = await prisma.item_maps.findMany({
    where: { deleted_at: null },
    select: {
      item_label: true,
      jwnet_code: true,
      org_id: true,
    },
    orderBy: { item_label: 'asc' },
  })

  if (itemMaps.length === 0) {
    console.log('  ‚ö†Ô∏è  item_maps „Å´„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„ÇìÔºÅ')
  } else {
    console.log(`  ÂêàË®à: ${itemMaps.length}‰ª∂`)
    itemMaps.forEach((item, i) => {
      console.log(`  ${i + 1}. "${item.item_label}" (code: ${item.jwnet_code || 'null'})`)
    })
  }

  // Step 2: store_item_collectors „ÅÆ item_name ‰∏ÄË¶ßÔºà„É¶„Éã„Éº„ÇØÔºâ
  console.log('\nüìã store_item_collectors „ÉÜ„Éº„Éñ„É´„ÅÆ item_name ‰∏ÄË¶ßÔºà„É¶„Éã„Éº„ÇØÔºâ:')
  const storeItems = await prisma.store_item_collectors.findMany({
    where: { deleted_at: null },
    distinct: ['item_name'],
    select: {
      item_name: true,
    },
    orderBy: { item_name: 'asc' },
  })

  if (storeItems.length === 0) {
    console.log('  ‚ö†Ô∏è  store_item_collectors „Å´„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„ÇìÔºÅ')
  } else {
    console.log(`  ÂêàË®à: ${storeItems.length}‰ª∂`)
    storeItems.forEach((item, i) => {
      console.log(`  ${i + 1}. "${item.item_name}"`)
    })
  }

  // Step 3: ‰∏ç‰∏ÄËá¥„ÉÅ„Çß„ÉÉ„ÇØ
  console.log('\nüîç ‰∏ç‰∏ÄËá¥„ÉÅ„Çß„ÉÉ„ÇØ:')
  const itemMapLabels = new Set(itemMaps.map(im => im.item_label))
  const missingInItemMaps = storeItems.filter(si => !itemMapLabels.has(si.item_name))

  if (missingInItemMaps.length === 0) {
    console.log('  ‚úÖ „Åô„Åπ„Å¶„ÅÆ item_name „Åå item_maps „Å´Â≠òÂú®„Åó„Åæ„Åô')
  } else {
    console.log(`  ‚ö†Ô∏è  item_maps „Å´Â≠òÂú®„Åó„Å™„ÅÑ item_name: ${missingInItemMaps.length}‰ª∂`)
    missingInItemMaps.forEach((item, i) => {
      console.log(`    ${i + 1}. "${item.item_name}"`)
    })
  }

  // Step 4: item_code „Åå null „ÅÆ„É¨„Ç≥„Éº„ÉâÊï∞
  console.log('\nüìä item_code „ÅåÊú™Ë®≠ÂÆö„ÅÆ„É¨„Ç≥„Éº„ÉâÊï∞:')
  const nullCount = await prisma.store_item_collectors.count({
    where: {
      OR: [
        { item_code: null },
        { item_code: '' },
      ],
      deleted_at: null,
    },
  })
  console.log(`  ${nullCount}‰ª∂`)

  await prisma.$disconnect()
}

main().catch((e) => {
  console.error('‚ùå „Ç®„É©„Éº:', e)
  process.exit(1)
})


