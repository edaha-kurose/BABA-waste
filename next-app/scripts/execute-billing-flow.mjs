import { PrismaClient } from '@prisma/client'
import * as dotenv from 'dotenv'
import dayjs from 'dayjs'

dotenv.config({ path: '.env.local' })

/**
 * Ê∂àË≤ªÁ®éË®àÁÆóÔºàÂàá„ÇäÊç®„Å¶Ôºâ
 */
function calculateTax(amount, taxRate = 0.1) {
  return Math.floor(amount * taxRate)
}

const prisma = new PrismaClient()

// „Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜ‰ºöÁ§æ„É¶„Éº„Ç∂„ÉºID (BABAÊ†™Âºè‰ºöÁ§æ„ÅÆadmin@test.com)
const SYSTEM_ADMIN_USER_ID = '579c9ffd-c3c0-4b1a-8e7e-8c6845c3165d'

async function main() {
  console.log('üöÄ Ë´ãÊ±Ç„Éï„É≠„ÉºÂÆüË°åÈñãÂßã\n')

  try {
    const billingMonth = dayjs().startOf('month').toDate()
    const tenants = await prisma.organizations.findMany({
      where: { 
        org_type: 'EMITTER', 
        deleted_at: null,
        name: { in: ['Ê•ΩÂ∏ÇÊ•ΩÂ∫ßÊ†™Âºè‰ºöÁ§æ', '„Ç≥„Çπ„É¢„ÇπËñ¨ÂìÅÊ†™Âºè‰ºöÁ§æ'] }
      },
    })

    for (const tenant of tenants) {
      console.log(`\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
      console.log(`üìã ${tenant.name}`)
      console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`)

      // ÂèéÈõÜÊ•≠ËÄÖÂèñÂæó
      const collectors = await prisma.collectors.findMany({
        where: { org_id: tenant.id, deleted_at: null },
      })

      console.log(`üìä Step 1: Ë´ãÊ±Ç„Çµ„Éû„É™„ÉºÁîüÊàê (${collectors.length}Á§æÂàÜ)`)

      for (const collector of collectors) {
        // ÊâøË™çÊ∏à„Åø„ÅÆË´ãÊ±ÇÊòéÁ¥∞„ÇíÂèñÂæó
        const approvedItems = await prisma.app_billing_items.findMany({
          where: {
            org_id: tenant.id,
            collector_id: collector.id,
            billing_month: billingMonth,
            status: 'APPROVED',
            deleted_at: null,
          },
        })

        if (approvedItems.length === 0) {
          console.log(`   ‚ö†Ô∏è  ${collector.company_name}: ÊâøË™çÊ∏à„ÅøÊòéÁ¥∞„Å™„Åó („Çπ„Ç≠„ÉÉ„Éó)`)
          continue
        }

        // ÈõÜË®à
        let totalFixedAmount = 0
        let totalMeteredAmount = 0
        let totalOtherAmount = 0
        let totalTaxAmount = 0
        let fixedItemsCount = 0
        let meteredItemsCount = 0
        let otherItemsCount = 0

        for (const item of approvedItems) {
          if (item.billing_type === 'FIXED') {
            totalFixedAmount += item.amount
            fixedItemsCount++
          } else if (item.billing_type === 'METERED') {
            totalMeteredAmount += item.amount
            meteredItemsCount++
          } else {
            totalOtherAmount += item.amount
            otherItemsCount++
          }
          totalTaxAmount += item.tax_amount
        }

        const subtotalAmount = totalFixedAmount + totalMeteredAmount + totalOtherAmount
        const totalAmount = subtotalAmount + totalTaxAmount

        // Êó¢Â≠ò„ÉÅ„Çß„ÉÉ„ÇØ
        const existingSummary = await prisma.billing_summaries.findUnique({
          where: {
            org_id_collector_id_billing_month: {
              org_id: tenant.id,
              collector_id: collector.id,
              billing_month: billingMonth,
            },
          },
        })

        if (existingSummary) {
          console.log(`   ‚úÖ ${collector.company_name}: Êó¢Â≠ò (¬•${totalAmount.toLocaleString()})`)
        } else {
          await prisma.billing_summaries.create({
            data: {
              org_id: tenant.id,
              collector_id: collector.id,
              billing_month: billingMonth,
              total_fixed_amount: totalFixedAmount,
              total_metered_amount: totalMeteredAmount,
              total_other_amount: totalOtherAmount,
              subtotal_amount: subtotalAmount,
              tax_amount: totalTaxAmount,
              total_amount: totalAmount,
              total_items_count: approvedItems.length,
              fixed_items_count: fixedItemsCount,
              metered_items_count: meteredItemsCount,
              other_items_count: otherItemsCount,
              status: 'APPROVED', // „ÉÜ„Çπ„ÉàÁî®„Å´Áõ¥Êé•APPROVED
              created_by: SYSTEM_ADMIN_USER_ID,
              updated_by: SYSTEM_ADMIN_USER_ID,
            },
          })
          console.log(`   ‚úÖ ${collector.company_name}: ÁîüÊàêÂÆå‰∫Ü (¬•${totalAmount.toLocaleString()})`)
        }
      }

      console.log(`\nüìÑ Step 2: „ÉÜ„Éä„É≥„ÉàË´ãÊ±ÇÊõ∏ÁîüÊàê`)

      // Êó¢Â≠ò„ÅÆ„ÉÜ„Éä„É≥„ÉàË´ãÊ±ÇÊõ∏„ÉÅ„Çß„ÉÉ„ÇØ
      const existingInvoice = await prisma.tenant_invoices.findFirst({
        where: {
          org_id: tenant.id,
          billing_month: billingMonth,
          deleted_at: null,
        },
      })

      if (existingInvoice) {
        console.log(`   ‚ö†Ô∏è  Êó¢Â≠ò„ÅÆË´ãÊ±ÇÊõ∏„ÅÇ„Çä: ${existingInvoice.invoice_number} („Çπ„Ç≠„ÉÉ„Éó)`)
        continue
      }

      // ÊâøË™çÊ∏à„ÅøÂèéÈõÜÊ•≠ËÄÖË´ãÊ±Ç„Çµ„Éû„É™„Éº„ÇíÂèñÂæó
      const approvedSummaries = await prisma.billing_summaries.findMany({
        where: {
          org_id: tenant.id,
          billing_month: billingMonth,
          status: 'APPROVED',
        },
        include: { collectors: true },
      })

      if (approvedSummaries.length === 0) {
        console.log(`   ‚ö†Ô∏è  ÊâøË™çÊ∏à„ÅøË´ãÊ±Ç„Çµ„Éû„É™„Éº„Å™„Åó („Çπ„Ç≠„ÉÉ„Éó)`)
        continue
      }

      // ÊâãÊï∞Êñô„É´„Éº„É´„ÇíÂèñÂæó
      const commissionRules = await prisma.commission_rules.findMany({
        where: { org_id: tenant.id, is_active: true, deleted_at: null },
      })

      // „Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥„ÅßË´ãÊ±ÇÊõ∏‰ΩúÊàê
      await prisma.$transaction(async (tx) => {
        const year = billingMonth.getFullYear()
        const month = String(billingMonth.getMonth() + 1).padStart(2, '0')
        const tenantCode = tenant.id.substring(tenant.id.length - 8)
        const invoiceNumber = `TI-${year}${month}-${tenantCode}`

        const invoice = await tx.tenant_invoices.create({
          data: {
            org_id: tenant.id,
            billing_month: billingMonth,
            invoice_number: invoiceNumber,
            status: 'DRAFT',
            created_by: SYSTEM_ADMIN_USER_ID,
            updated_by: SYSTEM_ADMIN_USER_ID,
          },
        })

        let collectorsSubtotal = 0
        let collectorsTax = 0
        let collectorsTotal = 0
        let commissionSubtotal = 0
        let commissionTax = 0
        let commissionTotal = 0
        let displayOrder = 1

        // ÂèéÈõÜÊ•≠ËÄÖ„Åî„Å®„ÅÆÊòéÁ¥∞„Å®ÊâãÊï∞Êñô
        for (const summary of approvedSummaries) {
          const baseAmount = summary.subtotal_amount
          const taxAmount = summary.tax_amount
          const totalAmount = summary.total_amount

          collectorsSubtotal += baseAmount
          collectorsTax += taxAmount
          collectorsTotal += totalAmount

          // ÂèéÈõÜÊ•≠ËÄÖË´ãÊ±ÇÂàÜ
          await tx.tenant_invoice_items.create({
            data: {
              tenant_invoice_id: invoice.id,
              item_type: 'COLLECTOR_BILLING',
              billing_summary_id: summary.id,
              collector_id: summary.collector_id,
              item_name: `${summary.collectors.company_name} Ë´ãÊ±ÇÂàÜ`,
              base_amount: baseAmount,
              commission_amount: 0,
              subtotal: baseAmount,
              tax_rate: 10.00,
              tax_amount: taxAmount,
              total_amount: totalAmount,
              is_auto_calculated: true,
              display_order: displayOrder++,
            },
          })

          // ÊâãÊï∞ÊñôË®àÁÆó
          let calculatedCommission = 0
          for (const rule of commissionRules) {
            if (rule.collector_id && rule.collector_id !== summary.collector_id) continue

            if (rule.billing_type === 'METERED' && rule.commission_type === 'PERCENTAGE') {
              calculatedCommission += (summary.total_metered_amount * Number(rule.commission_value)) / 100
            } else if (rule.billing_type === 'FIXED' && rule.commission_type === 'FIXED_AMOUNT') {
              calculatedCommission += Number(rule.commission_value)
            }
          }

          if (calculatedCommission > 0) {
            const commissionTaxAmt = calculateTax(calculatedCommission, 0.1)
            const commissionTotalAmt = calculatedCommission + commissionTaxAmt

            commissionSubtotal += calculatedCommission
            commissionTax += commissionTaxAmt
            commissionTotal += commissionTotalAmt

            await tx.tenant_invoice_items.create({
              data: {
                tenant_invoice_id: invoice.id,
                item_type: 'COMMISSION',
                collector_id: summary.collector_id,
                item_name: `${summary.collectors.company_name} ÊâãÊï∞Êñô`,
                base_amount: 0,
                commission_amount: calculatedCommission,
                subtotal: calculatedCommission,
                tax_rate: 10.00,
                tax_amount: commissionTaxAmt,
                total_amount: commissionTotalAmt,
                is_auto_calculated: true,
                display_order: displayOrder++,
              },
            })
          }
        }

        // ÂÖ±ÈÄöÁÆ°ÁêÜË≤ª
        const commonRule = commissionRules.find((r) => r.collector_id === null && r.billing_type === 'OTHER')
        if (commonRule) {
          const managementFee = Number(commonRule.commission_value)
          const managementTax = calculateTax(managementFee, 0.1)
          const managementTotal = managementFee + managementTax

          commissionSubtotal += managementFee
          commissionTax += managementTax
          commissionTotal += managementTotal

          await tx.tenant_invoice_items.create({
            data: {
              tenant_invoice_id: invoice.id,
              item_type: 'MANAGEMENT_FEE',
              item_name: '„Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜË≤ª',
              base_amount: 0,
              commission_amount: managementFee,
              subtotal: managementFee,
              tax_rate: 10.00,
              tax_amount: managementTax,
              total_amount: managementTotal,
              is_auto_calculated: true,
              display_order: displayOrder++,
            },
          })
        }

        // Ë´ãÊ±ÇÊõ∏„ÅÆÂêàË®àÈáëÈ°ç„ÇíÊõ¥Êñ∞
        await tx.tenant_invoices.update({
          where: { id: invoice.id },
          data: {
            collectors_subtotal: collectorsSubtotal,
            collectors_tax: collectorsTax,
            collectors_total: collectorsTotal,
            commission_subtotal: commissionSubtotal,
            commission_tax: commissionTax,
            commission_total: commissionTotal,
            grand_subtotal: collectorsSubtotal + commissionSubtotal,
            grand_tax: collectorsTax + commissionTax,
            grand_total: collectorsTotal + commissionTotal,
          },
        })

        console.log(`   ‚úÖ Ë´ãÊ±ÇÊõ∏Áï™Âè∑: ${invoiceNumber}`)
        console.log(`   üìä ÂèéÈõÜÊ•≠ËÄÖË´ãÊ±Ç: ¬•${collectorsTotal.toLocaleString()}`)
        console.log(`   üí∞ ÊâãÊï∞Êñô„ÉªÁÆ°ÁêÜË≤ª: ¬•${commissionTotal.toLocaleString()}`)
        console.log(`   üíµ „ÉÜ„Éä„É≥„ÉàË´ãÊ±ÇÈ°ç: ¬•${(collectorsTotal + commissionTotal).toLocaleString()}`)
      })
    }

    console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')
    console.log('‚úÖ Ë´ãÊ±Ç„Éï„É≠„ÉºÂÆüË°åÂÆå‰∫Ü\n')
  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

main()

