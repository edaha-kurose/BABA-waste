// ============================================================================
// Êó¢Â≠ò„Éá„Éº„ÇøÁ¢∫Ë™ç„Çπ„ÇØ„É™„Éó„Éà
// ÁõÆÁöÑ: „ÉÜ„Çπ„Éà„Éá„Éº„Çø‰ΩúÊàêÂâç„Å´Êó¢Â≠ò„ÅÆ„Éû„Çπ„Çø„Éº„Éá„Éº„Çø„ÇíÁ¢∫Ë™ç
// ============================================================================

import { config } from 'dotenv'
import { resolve } from 'path'

// .env.local „ÇíË™≠„ÅøËæº„ÇÄ
config({ path: resolve(__dirname, '../.env.local') })

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// ÁµÑÁπîIDÔºàÊó¢Â≠ò„ÅÆ„ÉÜ„Çπ„Éà„Éá„Éº„ÇøÁî®ÁµÑÁπîÔºâ
const ORG_ID = '00000000-0000-0000-0000-000000000001'

async function main() {
  console.log('üìä Êó¢Â≠ò„Éá„Éº„ÇøÁ¢∫Ë™çÈñãÂßã...\n')

  try {
    // ============================================================================
    // 1. ÁµÑÁπî„Éá„Éº„ÇøÁ¢∫Ë™ç
    // ============================================================================
    console.log('=' . repeat(60))
    console.log('1Ô∏è‚É£  organizations (ÁµÑÁπî„Éû„Çπ„Çø„Éº)')
    console.log('='.repeat(60))
    
    const organizations = await prisma.organizations.findMany({
      take: 5,
    })
    console.log(`  ‰ª∂Êï∞: ${organizations.length}‰ª∂`)
    if (organizations.length > 0) {
      console.log(`  ‰æã: ${organizations[0].id} - ${organizations[0].name}`)
    }
    console.log('')

    // ============================================================================
    // 2. „É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøÁ¢∫Ë™ç
    // ============================================================================
    console.log('='.repeat(60))
    console.log('2Ô∏è‚É£  app_users („Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„É¶„Éº„Ç∂„Éº)')
    console.log('='.repeat(60))
    
    const appUsers = await prisma.app_users.findMany({
      take: 10,
      include: {
        user_org_roles: {
          where: { org_id: ORG_ID },
        },
      },
    })
    const appUsersInOrg = appUsers.filter(u => u.user_org_roles.length > 0)
    console.log(`  ‰ª∂Êï∞ÔºàÂÖ®‰ΩìÔºâ: ${appUsers.length}‰ª∂`)
    console.log(`  ‰ª∂Êï∞Ôºàorg_id=${ORG_ID}Ôºâ: ${appUsersInOrg.length}‰ª∂`)
    if (appUsersInOrg.length > 0) {
      console.log(`  ‰æã: ${appUsersInOrg[0].id} - ${appUsersInOrg[0].email}`)
      console.log(`     „É≠„Éº„É´: ${appUsersInOrg[0].user_org_roles[0].role}`)
    }
    console.log('')

    // ============================================================================
    // 3. Â∫óËàó„Éá„Éº„ÇøÁ¢∫Ë™ç
    // ============================================================================
    console.log('='.repeat(60))
    console.log('3Ô∏è‚É£  stores (Â∫óËàó„Éû„Çπ„Çø„Éº)')
    console.log('='.repeat(60))
    
    const stores = await prisma.stores.findMany({
      where: { org_id: ORG_ID, deleted_at: null },
      take: 10,
    })
    console.log(`  ‰ª∂Êï∞Ôºàorg_id=${ORG_ID}Ôºâ: ${stores.length}‰ª∂`)
    if (stores.length > 0) {
      stores.forEach((s, idx) => {
        console.log(`  ${idx + 1}. ${s.store_code} - ${s.name} (${s.area || 'Êú™Ë®≠ÂÆö'})`)
      })
    } else {
      console.log('  ‚ö†Ô∏è  Â∫óËàó„Éá„Éº„Çø„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì ‚Üí ‰ΩúÊàê„ÅåÂøÖË¶Å')
    }
    console.log('')

    // ============================================================================
    // 4. ÂìÅÁõÆ„Éû„ÉÉ„Éó„Éá„Éº„ÇøÁ¢∫Ë™ç
    // ============================================================================
    console.log('='.repeat(60))
    console.log('4Ô∏è‚É£  item_maps (ÂìÅÁõÆ„Éû„ÉÉ„Éó)')
    console.log('='.repeat(60))
    
    const itemMaps = await prisma.item_maps.findMany({
      where: { org_id: ORG_ID, deleted_at: null },
      take: 10,
    })
    console.log(`  ‰ª∂Êï∞Ôºàorg_id=${ORG_ID}Ôºâ: ${itemMaps.length}‰ª∂`)
    if (itemMaps.length > 0) {
      itemMaps.forEach((i, idx) => {
        console.log(`  ${idx + 1}. ${i.item_label} (${i.jwnet_code}) - ${i.default_unit}`)
      })
    } else {
      console.log('  ‚ö†Ô∏è  ÂìÅÁõÆ„Éû„ÉÉ„Éó„Éá„Éº„Çø„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì ‚Üí ‰ΩúÊàê„ÅåÂøÖË¶Å')
    }
    console.log('')

    // ============================================================================
    // 5. JWNET„Ç≥„Éº„Éâ„Éá„Éº„ÇøÁ¢∫Ë™ç
    // ============================================================================
    console.log('='.repeat(60))
    console.log('5Ô∏è‚É£  jwnet_waste_codes (JWNET„Ç≥„Éº„Éâ„Éû„Çπ„Çø„Éº)')
    console.log('='.repeat(60))
    
    const jwnetCodes = await prisma.jwnet_waste_codes.findMany({
      take: 10,
    })
    console.log(`  ‰ª∂Êï∞: ${jwnetCodes.length}‰ª∂`)
    if (jwnetCodes.length > 0) {
      jwnetCodes.slice(0, 5).forEach((c, idx) => {
        console.log(`  ${idx + 1}. ${c.code} - ${c.name}`)
      })
    } else {
      console.log('  ‚ö†Ô∏è  JWNET„Ç≥„Éº„Éâ„Éá„Éº„Çø„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì')
    }
    console.log('')

    // ============================================================================
    // 6. ÂªÉÊ£ÑÁâ©Á®ÆÂà•„Éû„Çπ„Çø„ÉºÁ¢∫Ë™çÔºàË§áÈõë„Å™„ÉÜ„Éº„Éñ„É´Ôºâ
    // ============================================================================
    console.log('='.repeat(60))
    console.log('6Ô∏è‚É£  waste_type_masters (ÂªÉÊ£ÑÁâ©Á®ÆÂà•„Éû„Çπ„Çø„Éº) ‚ö†Ô∏è Ë§áÈõë')
    console.log('='.repeat(60))
    
    const wasteTypes = await prisma.waste_type_masters.findMany({
      where: { org_id: ORG_ID, deleted_at: null },
      take: 5,
    })
    console.log(`  ‰ª∂Êï∞Ôºàorg_id=${ORG_ID}Ôºâ: ${wasteTypes.length}‰ª∂`)
    if (wasteTypes.length > 0) {
      wasteTypes.forEach((w, idx) => {
        console.log(`  ${idx + 1}. ${w.waste_type_code} - ${w.waste_type_name}`)
        console.log(`     collector_id: ${w.collector_id}`)
      })
    } else {
      console.log('  ‚ö†Ô∏è  ÂªÉÊ£ÑÁâ©Á®ÆÂà•„Éû„Çπ„Çø„Éº„Éá„Éº„Çø„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì')
      console.log('  ‚ÑπÔ∏è  „Åì„ÅÆ„ÉÜ„Éº„Éñ„É´„ÅØË§áÈõë„Å™‰æùÂ≠òÈñ¢‰øÇ„ÇíÊåÅ„Å§„Åü„ÇÅ„ÄÅ„Çπ„Ç≠„ÉÉ„ÉóÊé®Â•®')
    }
    console.log('')

    // ============================================================================
    // 7. „Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥„Éá„Éº„ÇøÁ¢∫Ë™ç
    // ============================================================================
    console.log('='.repeat(60))
    console.log('7Ô∏è‚É£  plans (ÂèéÈõÜ‰∫àÂÆö)')
    console.log('='.repeat(60))
    
    const plans = await prisma.plans.findMany({
      where: { org_id: ORG_ID, deleted_at: null },
      take: 5,
    })
    console.log(`  ‰ª∂Êï∞Ôºàorg_id=${ORG_ID}Ôºâ: ${plans.length}‰ª∂`)
    if (plans.length > 0) {
      console.log(`  ÊúÄÊñ∞: ${plans[0].planned_date} - ${plans[0].planned_qty} ${plans[0].unit}`)
    } else {
      console.log('  ‚ö†Ô∏è  ÂèéÈõÜ‰∫àÂÆö„Éá„Éº„Çø„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì ‚Üí ‰ΩúÊàê„ÅåÂøÖË¶Å')
    }
    console.log('')

    console.log('='.repeat(60))
    console.log('8Ô∏è‚É£  reservations (JWNET‰∫àÁ¥Ñ)')
    console.log('='.repeat(60))
    
    const reservations = await prisma.reservations.findMany({
      where: { org_id: ORG_ID, deleted_at: null },
      take: 5,
    })
    console.log(`  ‰ª∂Êï∞Ôºàorg_id=${ORG_ID}Ôºâ: ${reservations.length}‰ª∂`)
    console.log('')

    console.log('='.repeat(60))
    console.log('9Ô∏è‚É£  registrations (JWNETÁôªÈå≤)')
    console.log('='.repeat(60))
    
    const registrations = await prisma.registrations.findMany({
      where: { org_id: ORG_ID, deleted_at: null },
      take: 5,
    })
    console.log(`  ‰ª∂Êï∞Ôºàorg_id=${ORG_ID}Ôºâ: ${registrations.length}‰ª∂`)
    console.log('')

    console.log('='.repeat(60))
    console.log('üîü actuals (ÂÆüÁ∏æ)')
    console.log('='.repeat(60))
    
    const actuals = await prisma.actuals.findMany({
      where: { org_id: ORG_ID, deleted_at: null },
      take: 5,
    })
    console.log(`  ‰ª∂Êï∞Ôºàorg_id=${ORG_ID}Ôºâ: ${actuals.length}‰ª∂`)
    console.log('')

    console.log('='.repeat(60))
    console.log('1Ô∏è‚É£1Ô∏è‚É£ billing_summaries (Ë´ãÊ±Ç„Çµ„Éû„É™„Éº)')
    console.log('='.repeat(60))
    
    const billingSummaries = await prisma.billing_summaries.findMany({
      where: { org_id: ORG_ID, deleted_at: null },
      take: 5,
    })
    console.log(`  ‰ª∂Êï∞Ôºàorg_id=${ORG_ID}Ôºâ: ${billingSummaries.length}‰ª∂`)
    console.log('')

    // ============================================================================
    // 8. „Çµ„Éû„É™„Éº
    // ============================================================================
    console.log('='.repeat(60))
    console.log('üìä „Çµ„Éû„É™„Éº')
    console.log('='.repeat(60))
    console.log('')
    console.log('„Äê„Éû„Çπ„Çø„Éº„Éá„Éº„Çø„Äë')
    console.log(`  ‚úÖ organizations: ${organizations.length}‰ª∂`)
    console.log(`  ‚úÖ app_users: ${appUsers.length}‰ª∂`)
    console.log(`  ${stores.length > 0 ? '‚úÖ' : '‚ö†Ô∏è '} stores: ${stores.length}‰ª∂ ${stores.length === 0 ? '‚Üê ‰ΩúÊàêÂøÖË¶Å' : ''}`)
    console.log(`  ${itemMaps.length > 0 ? '‚úÖ' : '‚ö†Ô∏è '} item_maps: ${itemMaps.length}‰ª∂ ${itemMaps.length === 0 ? '‚Üê ‰ΩúÊàêÂøÖË¶Å' : ''}`)
    console.log(`  ‚úÖ jwnet_waste_codes: ${jwnetCodes.length}‰ª∂`)
    console.log(`  ‚ÑπÔ∏è  waste_type_masters: ${wasteTypes.length}‰ª∂ (Ë§áÈõë„Éª„Çπ„Ç≠„ÉÉ„ÉóÊé®Â•®)`)
    console.log('')
    console.log('„Äê„Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥„Éá„Éº„Çø„Äë')
    console.log(`  ${plans.length > 0 ? '‚úÖ' : '‚ö†Ô∏è '} plans: ${plans.length}‰ª∂ ${plans.length === 0 ? '‚Üê ‰ΩúÊàêÂøÖË¶Å' : ''}`)
    console.log(`  ${reservations.length > 0 ? '‚úÖ' : '‚ö†Ô∏è '} reservations: ${reservations.length}‰ª∂`)
    console.log(`  ${registrations.length > 0 ? '‚úÖ' : '‚ö†Ô∏è '} registrations: ${registrations.length}‰ª∂`)
    console.log(`  ${actuals.length > 0 ? '‚úÖ' : '‚ö†Ô∏è '} actuals: ${actuals.length}‰ª∂`)
    console.log(`  ${billingSummaries.length > 0 ? '‚úÖ' : '‚ö†Ô∏è '} billing_summaries: ${billingSummaries.length}‰ª∂`)
    console.log('')

    // ============================================================================
    // 9. Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥
    // ============================================================================
    console.log('='.repeat(60))
    console.log('üí° Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥')
    console.log('='.repeat(60))
    console.log('')

    const needsStores = stores.length === 0
    const needsItemMaps = itemMaps.length === 0
    const needsPlans = plans.length === 0

    if (needsStores || needsItemMaps || needsPlans) {
      console.log('„Äê‰ΩúÊàê„ÅåÂøÖË¶Å„Å™„Éá„Éº„Çø„Äë')
      if (needsStores) {
        console.log('  1. storesÔºàÂ∫óËàó„Éû„Çπ„Çø„ÉºÔºâ: 10Â∫óËàó‰ΩúÊàê')
      }
      if (needsItemMaps) {
        console.log('  2. item_mapsÔºàÂìÅÁõÆ„Éû„ÉÉ„ÉóÔºâ: 5-10ÂìÅÁõÆ‰ΩúÊàê')
      }
      if (needsPlans) {
        console.log('  3. plansÔºàÂèéÈõÜ‰∫àÂÆöÔºâ: 12„É∂Êúà√óÂ∫óËàóÊï∞√ó2Âõû/Êúà')
        console.log('  4. reservations/registrations/actuals: Plans „Å´Á¥ê„Å•„Åë„Å¶‰ΩúÊàê')
        console.log('  5. billing_summaries: ÊúàÊ¨°„ÅßÈõÜË®à‰ΩúÊàê')
      }
      console.log('')
      console.log('Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó: „Ç∑„É≥„Éó„É´Áâà„Ç∑„Éº„Éâ„Çπ„ÇØ„É™„Éó„Éàv2„ÇíÂÆüË°å')
      console.log('  ‚Üí pnpm prisma:seed')
    } else {
      console.log('‚úÖ Êó¢Â≠ò„Éá„Éº„Çø„ÅåÂÖÖÂÆü„Åó„Å¶„ÅÑ„Åæ„ÅôÔºÅ')
      console.log('  ‚Üí E2E„ÉÜ„Çπ„Éà„ÇíÂÆüË°åÂèØËÉΩ')
      console.log('  ‚Üí pnpm test:e2e')
    }
    console.log('')

  } catch (error) {
    console.error('‚ùå „Ç®„É©„ÉºÁô∫Áîü:', error)
    throw error
  }
}

main()
  .then(async () => {
    await prisma.$disconnect()
    process.exit(0)
  })
  .catch(async (e) => {
    console.error(e)
    await prisma.$disconnect()
    process.exit(1)
  })

