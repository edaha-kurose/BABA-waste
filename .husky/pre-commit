#!/usr/bin/env sh
echo "🔍 Pre-commit チェックを実行中..."

# ステージングされたファイルを確認
STAGED_FILES=$(git diff --cached --name-only)

# next-app/ 内と インフラファイル(.husky/, .github/) 以外のファイルがあるかチェック
NON_NEXT_APP_FILES=$(echo "$STAGED_FILES" | grep -v "^next-app/" | grep -v "^\.husky/" | grep -v "^\.github/" | grep -v "^\.cursor/" | grep -v "^docs/" | grep -v "^db/")

if [ -n "$NON_NEXT_APP_FILES" ]; then
  # 実際のソースコードファイル（src/, contracts/等）が変更されているかチェック
  SOURCE_FILES=$(echo "$NON_NEXT_APP_FILES" | grep -E "^(src/|contracts/|supabase/functions/|tests/)")
  
  if [ -n "$SOURCE_FILES" ]; then
    # ルートのソースコードが変更されている場合のみ型チェック
    echo "📁 ルートディレクトリのソースコード変更を検出。型チェック & Lint を実行..."
    [ -f package.json ] && { pnpm typecheck || true; pnpm lint || true; }
  else
    # 設定ファイルのみの変更の場合はスキップ
    echo "⚠️ 設定ファイルのみの変更を検出。型チェックをスキップします。"
  fi
else
  # next-app/ とインフラファイルのみの場合、next-app/ ディレクトリでチェック
  echo "📁 next-app/ 内の変更のみを検出。next-app/ でチェックを実行..."
  if [ -f next-app/package.json ]; then
    cd next-app
    pnpm typecheck || true
    pnpm lint || true
    cd ..
  fi
fi

# DDL変更検知 → チェックリスト（警告のみ）
CHANGED_FILES=$(git diff --cached --name-only)
if echo "$CHANGED_FILES" | grep -qE "\b(db/ddl/|db/migrations/|prisma/migrations/)"; then
  echo "⚠️ DDL/マイグレーションの変更を検出。"
  echo "📋 コミット後に以下を確認してください:"
  echo "  [ ] 影響範囲: pnpm schema:impact -- --table <t> [--column <c>]"
  echo "  [ ] 型再生成: pnpm gen:db-types && pnpm codegen"
  echo "  [ ] テスト: pnpm test || true"
fi

echo "✅ OK"

